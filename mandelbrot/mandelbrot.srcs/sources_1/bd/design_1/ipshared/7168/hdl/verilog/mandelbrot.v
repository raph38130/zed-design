// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mandelbrot,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=3729,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=36,HLS_SYN_FF=2224,HLS_SYN_LUT=3941}" *)

module mandelbrot (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cx,
        cx_ap_vld,
        cx_ap_ack,
        cy,
        cy_ap_vld,
        cy_ap_ack,
        ap_return
);

parameter    ap_ST_fsm_state1 = 31'b1;
parameter    ap_ST_fsm_state2 = 31'b10;
parameter    ap_ST_fsm_state3 = 31'b100;
parameter    ap_ST_fsm_state4 = 31'b1000;
parameter    ap_ST_fsm_state5 = 31'b10000;
parameter    ap_ST_fsm_state6 = 31'b100000;
parameter    ap_ST_fsm_state7 = 31'b1000000;
parameter    ap_ST_fsm_state8 = 31'b10000000;
parameter    ap_ST_fsm_state9 = 31'b100000000;
parameter    ap_ST_fsm_state10 = 31'b1000000000;
parameter    ap_ST_fsm_state11 = 31'b10000000000;
parameter    ap_ST_fsm_state12 = 31'b100000000000;
parameter    ap_ST_fsm_state13 = 31'b1000000000000;
parameter    ap_ST_fsm_state14 = 31'b10000000000000;
parameter    ap_ST_fsm_state15 = 31'b100000000000000;
parameter    ap_ST_fsm_state16 = 31'b1000000000000000;
parameter    ap_ST_fsm_state17 = 31'b10000000000000000;
parameter    ap_ST_fsm_state18 = 31'b100000000000000000;
parameter    ap_ST_fsm_state19 = 31'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 31'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 31'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 31'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 31'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 31'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 31'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 31'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 31'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 31'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 31'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 31'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 31'b1000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv64_4000000000000000 = 64'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_4010000000000000 = 64'b100000000010000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv11_7FF = 11'b11111111111;
parameter    ap_const_lv52_0 = 52'b0000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv32_1E = 32'b11110;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] cx;
input   cx_ap_vld;
output   cx_ap_ack;
input  [63:0] cy;
input   cy_ap_vld;
output   cy_ap_ack;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cx_ap_ack;
reg cy_ap_ack;
reg[7:0] ap_return;

(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    cx_blk_n;
reg    cy_blk_n;
wire   [63:0] grp_fu_114_p2;
reg   [63:0] reg_138;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state13;
wire   [0:0] ap_CS_fsm_state24;
wire   [63:0] grp_fu_120_p2;
reg   [63:0] reg_143;
wire   [63:0] grp_fu_110_p2;
reg   [63:0] reg_148;
wire   [0:0] ap_CS_fsm_state12;
wire   [0:0] ap_CS_fsm_state17;
reg   [63:0] cy_read_reg_215;
reg    ap_condition_110;
reg   [63:0] cx_read_reg_221;
wire   [0:0] tmp_fu_156_p3;
reg   [0:0] tmp_reg_227;
wire   [0:0] ap_CS_fsm_state2;
wire   [8:0] i_1_fu_164_p2;
reg   [8:0] i_1_reg_231;
wire   [63:0] grp_fu_126_p2;
reg   [63:0] tmp_5_reg_236;
reg   [63:0] y_1_reg_241;
wire   [0:0] ap_CS_fsm_state18;
reg   [63:0] tmp_s_reg_248;
wire   [0:0] ap_CS_fsm_state29;
wire   [7:0] tmp_13_fu_211_p1;
wire   [0:0] ap_CS_fsm_state30;
wire   [0:0] tmp_12_fu_205_p2;
reg   [8:0] i_reg_78;
reg   [63:0] t_reg_90;
reg   [63:0] y_reg_100;
reg   [63:0] grp_fu_110_p0;
reg   [63:0] grp_fu_110_p1;
wire   [0:0] ap_CS_fsm_state8;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] ap_CS_fsm_state25;
reg   [63:0] grp_fu_114_p0;
reg   [63:0] grp_fu_114_p1;
wire   [0:0] ap_CS_fsm_state19;
reg   [63:0] grp_fu_120_p0;
reg   [63:0] grp_fu_120_p1;
wire   [63:0] tmp_to_int_fu_170_p1;
wire   [10:0] tmp_4_fu_173_p4;
wire   [51:0] tmp_7_fu_183_p1;
wire   [0:0] notrhs_fu_193_p2;
wire   [0:0] notlhs_fu_187_p2;
wire   [0:0] tmp_10_fu_199_p2;
wire   [0:0] tmp_11_fu_133_p2;
reg   [1:0] grp_fu_110_opcode;
wire   [0:0] ap_CS_fsm_state31;
reg   [30:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 31'b1;
end

mandelbrot_dadddsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dadddsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_110_p0),
    .din1(grp_fu_110_p1),
    .opcode(grp_fu_110_opcode),
    .ce(1'b1),
    .dout(grp_fu_110_p2)
);

mandelbrot_dmul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dmul_6cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_114_p0),
    .din1(grp_fu_114_p1),
    .ce(1'b1),
    .dout(grp_fu_114_p2)
);

mandelbrot_dmul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dmul_6cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_120_p0),
    .din1(grp_fu_120_p1),
    .ce(1'b1),
    .dout(grp_fu_120_p2)
);

mandelbrot_dmul_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dmul_6cud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(t_reg_90),
    .din1(ap_const_lv64_4000000000000000),
    .ce(1'b1),
    .dout(grp_fu_126_p2)
);

mandelbrot_dcmp_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
mandelbrot_dcmp_6dEe_U5(
    .din0(tmp_s_reg_248),
    .din1(ap_const_lv64_4010000000000000),
    .opcode(ap_const_lv5_2),
    .dout(tmp_11_fu_133_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (tmp_reg_227 == 1'b0) & (1'b0 == tmp_12_fu_205_p2))) begin
        i_reg_78 <= i_1_reg_231;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_110 == 1'b1))) begin
        i_reg_78 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (tmp_reg_227 == 1'b0) & (1'b0 == tmp_12_fu_205_p2))) begin
        t_reg_90 <= reg_148;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_110 == 1'b1))) begin
        t_reg_90 <= cx;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (tmp_reg_227 == 1'b0) & (1'b0 == tmp_12_fu_205_p2))) begin
        y_reg_100 <= y_1_reg_241;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_110 == 1'b1))) begin
        y_reg_100 <= cy;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (~(tmp_reg_227 == 1'b0) | ~(1'b0 == tmp_12_fu_205_p2)))) begin
        ap_return <= tmp_13_fu_211_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_110 == 1'b1))) begin
        cx_read_reg_221 <= cx;
        cy_read_reg_215 <= cy;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_231 <= i_1_fu_164_p2;
        tmp_reg_227 <= i_reg_78[ap_const_lv32_8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state24))) begin
        reg_138 <= grp_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state24))) begin
        reg_143 <= grp_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_148 <= grp_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_5_reg_236 <= grp_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_s_reg_248 <= grp_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        y_1_reg_241 <= grp_fu_110_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_110 == 1'b1))) begin
        cx_ap_ack = 1'b1;
    end else begin
        cx_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        cx_blk_n = cx_ap_vld;
    end else begin
        cx_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_110 == 1'b1))) begin
        cy_ap_ack = 1'b1;
    end else begin
        cy_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        cy_blk_n = cy_ap_vld;
    end else begin
        cy_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_110_opcode = ap_const_lv2_1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_fu_110_opcode = ap_const_lv2_0;
    end else begin
        grp_fu_110_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_110_p0 = reg_148;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_fu_110_p0 = reg_138;
    end else begin
        grp_fu_110_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_110_p1 = cy_read_reg_215;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_110_p1 = cx_read_reg_221;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_fu_110_p1 = reg_143;
    end else begin
        grp_fu_110_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_114_p0 = reg_148;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_114_p0 = tmp_5_reg_236;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_114_p0 = t_reg_90;
    end else begin
        grp_fu_114_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_114_p1 = reg_148;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_114_p1 = y_reg_100;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_114_p1 = t_reg_90;
    end else begin
        grp_fu_114_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_120_p0 = y_1_reg_241;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_120_p0 = y_reg_100;
    end else begin
        grp_fu_120_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_120_p1 = y_1_reg_241;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_120_p1 = y_reg_100;
    end else begin
        grp_fu_120_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_condition_110 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(tmp_fu_156_p3 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if ((~(tmp_reg_227 == 1'b0) | ~(1'b0 == tmp_12_fu_205_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state29 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_state30 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_state31 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

always @ (*) begin
    ap_condition_110 = ((ap_start == 1'b0) | (cy_ap_vld == 1'b0) | (cx_ap_vld == 1'b0));
end

assign i_1_fu_164_p2 = (i_reg_78 + ap_const_lv9_1);

assign notlhs_fu_187_p2 = ((tmp_4_fu_173_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notrhs_fu_193_p2 = ((tmp_7_fu_183_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign tmp_10_fu_199_p2 = (notrhs_fu_193_p2 | notlhs_fu_187_p2);

assign tmp_12_fu_205_p2 = (tmp_10_fu_199_p2 & tmp_11_fu_133_p2);

assign tmp_13_fu_211_p1 = i_reg_78[7:0];

assign tmp_4_fu_173_p4 = {{tmp_to_int_fu_170_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_7_fu_183_p1 = tmp_to_int_fu_170_p1[51:0];

assign tmp_fu_156_p3 = i_reg_78[ap_const_lv32_8];

assign tmp_to_int_fu_170_p1 = tmp_s_reg_248;

endmodule //mandelbrot
