// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mandelbrot.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mandelbrot::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mandelbrot::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<31> mandelbrot::ap_ST_fsm_state1 = "1";
const sc_lv<31> mandelbrot::ap_ST_fsm_state2 = "10";
const sc_lv<31> mandelbrot::ap_ST_fsm_state3 = "100";
const sc_lv<31> mandelbrot::ap_ST_fsm_state4 = "1000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state5 = "10000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state6 = "100000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state7 = "1000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state8 = "10000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state9 = "100000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state10 = "1000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state11 = "10000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state12 = "100000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<31> mandelbrot::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<32> mandelbrot::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> mandelbrot::ap_const_lv1_1 = "1";
const bool mandelbrot::ap_const_boolean_1 = true;
const sc_lv<32> mandelbrot::ap_const_lv32_6 = "110";
const sc_lv<32> mandelbrot::ap_const_lv32_C = "1100";
const sc_lv<32> mandelbrot::ap_const_lv32_17 = "10111";
const sc_lv<32> mandelbrot::ap_const_lv32_B = "1011";
const sc_lv<32> mandelbrot::ap_const_lv32_10 = "10000";
const sc_lv<32> mandelbrot::ap_const_lv32_1 = "1";
const sc_lv<32> mandelbrot::ap_const_lv32_11 = "10001";
const sc_lv<32> mandelbrot::ap_const_lv32_1C = "11100";
const sc_lv<32> mandelbrot::ap_const_lv32_1D = "11101";
const sc_lv<1> mandelbrot::ap_const_lv1_0 = "0";
const sc_lv<9> mandelbrot::ap_const_lv9_0 = "000000000";
const sc_lv<32> mandelbrot::ap_const_lv32_7 = "111";
const sc_lv<32> mandelbrot::ap_const_lv32_D = "1101";
const sc_lv<32> mandelbrot::ap_const_lv32_18 = "11000";
const sc_lv<32> mandelbrot::ap_const_lv32_12 = "10010";
const sc_lv<64> mandelbrot::ap_const_lv64_4000000000000000 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> mandelbrot::ap_const_lv64_4010000000000000 = "100000000010000000000000000000000000000000000000000000000000000";
const sc_lv<32> mandelbrot::ap_const_lv32_8 = "1000";
const sc_lv<9> mandelbrot::ap_const_lv9_1 = "1";
const sc_lv<32> mandelbrot::ap_const_lv32_34 = "110100";
const sc_lv<32> mandelbrot::ap_const_lv32_3E = "111110";
const sc_lv<11> mandelbrot::ap_const_lv11_7FF = "11111111111";
const sc_lv<52> mandelbrot::ap_const_lv52_0 = "0000000000000000000000000000000000000000000000000000";
const sc_lv<2> mandelbrot::ap_const_lv2_0 = "00";
const sc_lv<2> mandelbrot::ap_const_lv2_1 = "1";
const sc_lv<5> mandelbrot::ap_const_lv5_2 = "10";
const sc_lv<32> mandelbrot::ap_const_lv32_1E = "11110";

mandelbrot::mandelbrot(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mandelbrot_dadddsbkb_U1 = new mandelbrot_dadddsbkb<1,5,64,64,64>("mandelbrot_dadddsbkb_U1");
    mandelbrot_dadddsbkb_U1->clk(ap_clk);
    mandelbrot_dadddsbkb_U1->reset(ap_rst);
    mandelbrot_dadddsbkb_U1->din0(grp_fu_110_p0);
    mandelbrot_dadddsbkb_U1->din1(grp_fu_110_p1);
    mandelbrot_dadddsbkb_U1->opcode(grp_fu_110_opcode);
    mandelbrot_dadddsbkb_U1->ce(ap_var_for_const0);
    mandelbrot_dadddsbkb_U1->dout(grp_fu_110_p2);
    mandelbrot_dmul_6cud_U2 = new mandelbrot_dmul_6cud<1,6,64,64,64>("mandelbrot_dmul_6cud_U2");
    mandelbrot_dmul_6cud_U2->clk(ap_clk);
    mandelbrot_dmul_6cud_U2->reset(ap_rst);
    mandelbrot_dmul_6cud_U2->din0(grp_fu_114_p0);
    mandelbrot_dmul_6cud_U2->din1(grp_fu_114_p1);
    mandelbrot_dmul_6cud_U2->ce(ap_var_for_const0);
    mandelbrot_dmul_6cud_U2->dout(grp_fu_114_p2);
    mandelbrot_dmul_6cud_U3 = new mandelbrot_dmul_6cud<1,6,64,64,64>("mandelbrot_dmul_6cud_U3");
    mandelbrot_dmul_6cud_U3->clk(ap_clk);
    mandelbrot_dmul_6cud_U3->reset(ap_rst);
    mandelbrot_dmul_6cud_U3->din0(grp_fu_120_p0);
    mandelbrot_dmul_6cud_U3->din1(grp_fu_120_p1);
    mandelbrot_dmul_6cud_U3->ce(ap_var_for_const0);
    mandelbrot_dmul_6cud_U3->dout(grp_fu_120_p2);
    mandelbrot_dmul_6cud_U4 = new mandelbrot_dmul_6cud<1,6,64,64,64>("mandelbrot_dmul_6cud_U4");
    mandelbrot_dmul_6cud_U4->clk(ap_clk);
    mandelbrot_dmul_6cud_U4->reset(ap_rst);
    mandelbrot_dmul_6cud_U4->din0(t_reg_90);
    mandelbrot_dmul_6cud_U4->din1(ap_var_for_const1);
    mandelbrot_dmul_6cud_U4->ce(ap_var_for_const0);
    mandelbrot_dmul_6cud_U4->dout(grp_fu_126_p2);
    mandelbrot_dcmp_6dEe_U5 = new mandelbrot_dcmp_6dEe<1,1,64,64,1>("mandelbrot_dcmp_6dEe_U5");
    mandelbrot_dcmp_6dEe_U5->din0(tmp_s_reg_248);
    mandelbrot_dcmp_6dEe_U5->din1(ap_var_for_const2);
    mandelbrot_dcmp_6dEe_U5->opcode(ap_var_for_const3);
    mandelbrot_dcmp_6dEe_U5->dout(tmp_11_fu_133_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_110);
    sensitive << ( ap_start );
    sensitive << ( cx_ap_vld );
    sensitive << ( cy_ap_vld );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state31 );

    SC_METHOD(thread_cx_ap_ack);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_condition_110 );

    SC_METHOD(thread_cx_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cx_ap_vld );

    SC_METHOD(thread_cy_ap_ack);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_condition_110 );

    SC_METHOD(thread_cy_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cy_ap_vld );

    SC_METHOD(thread_grp_fu_110_opcode);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_grp_fu_110_p0);
    sensitive << ( reg_138 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( reg_148 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_grp_fu_110_p1);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( reg_143 );
    sensitive << ( cy_read_reg_215 );
    sensitive << ( cx_read_reg_221 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_grp_fu_114_p0);
    sensitive << ( reg_148 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_5_reg_236 );
    sensitive << ( t_reg_90 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_grp_fu_114_p1);
    sensitive << ( reg_148 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( t_reg_90 );
    sensitive << ( y_reg_100 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_grp_fu_120_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( y_1_reg_241 );
    sensitive << ( y_reg_100 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_grp_fu_120_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( y_1_reg_241 );
    sensitive << ( y_reg_100 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_i_1_fu_164_p2);
    sensitive << ( i_reg_78 );

    SC_METHOD(thread_notlhs_fu_187_p2);
    sensitive << ( tmp_reg_227 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( tmp_4_fu_173_p4 );

    SC_METHOD(thread_notrhs_fu_193_p2);
    sensitive << ( tmp_reg_227 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( tmp_7_fu_183_p1 );

    SC_METHOD(thread_tmp_10_fu_199_p2);
    sensitive << ( notrhs_fu_193_p2 );
    sensitive << ( notlhs_fu_187_p2 );

    SC_METHOD(thread_tmp_12_fu_205_p2);
    sensitive << ( tmp_10_fu_199_p2 );
    sensitive << ( tmp_11_fu_133_p2 );

    SC_METHOD(thread_tmp_13_fu_211_p1);
    sensitive << ( i_reg_78 );

    SC_METHOD(thread_tmp_4_fu_173_p4);
    sensitive << ( tmp_to_int_fu_170_p1 );

    SC_METHOD(thread_tmp_7_fu_183_p1);
    sensitive << ( tmp_to_int_fu_170_p1 );

    SC_METHOD(thread_tmp_fu_156_p3);
    sensitive << ( i_reg_78 );

    SC_METHOD(thread_tmp_to_int_fu_170_p1);
    sensitive << ( tmp_s_reg_248 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_condition_110 );
    sensitive << ( tmp_fu_156_p3 );
    sensitive << ( tmp_reg_227 );
    sensitive << ( tmp_12_fu_205_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    ap_CS_fsm = "0000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mandelbrot_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, cx, "(port)cx");
    sc_trace(mVcdFile, cx_ap_vld, "(port)cx_ap_vld");
    sc_trace(mVcdFile, cx_ap_ack, "(port)cx_ap_ack");
    sc_trace(mVcdFile, cy, "(port)cy");
    sc_trace(mVcdFile, cy_ap_vld, "(port)cy_ap_vld");
    sc_trace(mVcdFile, cy_ap_ack, "(port)cy_ap_ack");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, cx_blk_n, "cx_blk_n");
    sc_trace(mVcdFile, cy_blk_n, "cy_blk_n");
    sc_trace(mVcdFile, grp_fu_114_p2, "grp_fu_114_p2");
    sc_trace(mVcdFile, reg_138, "reg_138");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, grp_fu_120_p2, "grp_fu_120_p2");
    sc_trace(mVcdFile, reg_143, "reg_143");
    sc_trace(mVcdFile, grp_fu_110_p2, "grp_fu_110_p2");
    sc_trace(mVcdFile, reg_148, "reg_148");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, cy_read_reg_215, "cy_read_reg_215");
    sc_trace(mVcdFile, ap_condition_110, "ap_condition_110");
    sc_trace(mVcdFile, cx_read_reg_221, "cx_read_reg_221");
    sc_trace(mVcdFile, tmp_fu_156_p3, "tmp_fu_156_p3");
    sc_trace(mVcdFile, tmp_reg_227, "tmp_reg_227");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_1_fu_164_p2, "i_1_fu_164_p2");
    sc_trace(mVcdFile, i_1_reg_231, "i_1_reg_231");
    sc_trace(mVcdFile, grp_fu_126_p2, "grp_fu_126_p2");
    sc_trace(mVcdFile, tmp_5_reg_236, "tmp_5_reg_236");
    sc_trace(mVcdFile, y_1_reg_241, "y_1_reg_241");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, tmp_s_reg_248, "tmp_s_reg_248");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, tmp_13_fu_211_p1, "tmp_13_fu_211_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, tmp_12_fu_205_p2, "tmp_12_fu_205_p2");
    sc_trace(mVcdFile, i_reg_78, "i_reg_78");
    sc_trace(mVcdFile, t_reg_90, "t_reg_90");
    sc_trace(mVcdFile, y_reg_100, "y_reg_100");
    sc_trace(mVcdFile, grp_fu_110_p0, "grp_fu_110_p0");
    sc_trace(mVcdFile, grp_fu_110_p1, "grp_fu_110_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, grp_fu_114_p0, "grp_fu_114_p0");
    sc_trace(mVcdFile, grp_fu_114_p1, "grp_fu_114_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, grp_fu_120_p0, "grp_fu_120_p0");
    sc_trace(mVcdFile, grp_fu_120_p1, "grp_fu_120_p1");
    sc_trace(mVcdFile, tmp_to_int_fu_170_p1, "tmp_to_int_fu_170_p1");
    sc_trace(mVcdFile, tmp_4_fu_173_p4, "tmp_4_fu_173_p4");
    sc_trace(mVcdFile, tmp_7_fu_183_p1, "tmp_7_fu_183_p1");
    sc_trace(mVcdFile, notrhs_fu_193_p2, "notrhs_fu_193_p2");
    sc_trace(mVcdFile, notlhs_fu_187_p2, "notlhs_fu_187_p2");
    sc_trace(mVcdFile, tmp_10_fu_199_p2, "tmp_10_fu_199_p2");
    sc_trace(mVcdFile, tmp_11_fu_133_p2, "tmp_11_fu_133_p2");
    sc_trace(mVcdFile, grp_fu_110_opcode, "grp_fu_110_opcode");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("mandelbrot.hdltvin.dat");
    mHdltvoutHandle.open("mandelbrot.hdltvout.dat");
}

mandelbrot::~mandelbrot() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mandelbrot_dadddsbkb_U1;
    delete mandelbrot_dmul_6cud_U2;
    delete mandelbrot_dmul_6cud_U3;
    delete mandelbrot_dmul_6cud_U4;
    delete mandelbrot_dcmp_6dEe_U5;
}

void mandelbrot::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mandelbrot::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv64_4000000000000000;
}

void mandelbrot::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv64_4010000000000000;
}

void mandelbrot::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv5_2;
}

void mandelbrot::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state30.read()) && 
         esl_seteq<1,1,1>(tmp_reg_227.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_205_p2.read()))) {
        i_reg_78 = i_1_reg_231.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_condition_110.read(), ap_const_boolean_1))) {
        i_reg_78 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state30.read()) && 
         esl_seteq<1,1,1>(tmp_reg_227.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_205_p2.read()))) {
        t_reg_90 = reg_148.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_condition_110.read(), ap_const_boolean_1))) {
        t_reg_90 = cx.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state30.read()) && 
         esl_seteq<1,1,1>(tmp_reg_227.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_205_p2.read()))) {
        y_reg_100 = y_1_reg_241.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_condition_110.read(), ap_const_boolean_1))) {
        y_reg_100 = cy.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state30.read()) && (!esl_seteq<1,1,1>(tmp_reg_227.read(), ap_const_lv1_0) || 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_205_p2.read())))) {
        ap_return = tmp_13_fu_211_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_condition_110.read(), ap_const_boolean_1))) {
        cx_read_reg_221 = cx.read();
        cy_read_reg_215 = cy.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        i_1_reg_231 = i_1_fu_164_p2.read();
        tmp_reg_227 = i_reg_78.read().range(8, 8);
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read())))) {
        reg_138 = grp_fu_114_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state24.read())))) {
        reg_143 = grp_fu_120_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state17.read())))) {
        reg_148 = grp_fu_110_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        tmp_5_reg_236 = grp_fu_126_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state29.read()))) {
        tmp_s_reg_248 = grp_fu_110_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state18.read()))) {
        y_1_reg_241 = grp_fu_110_p2.read();
    }
}

void mandelbrot::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void mandelbrot::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read().range(11, 11);
}

void mandelbrot::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read().range(12, 12);
}

void mandelbrot::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read().range(13, 13);
}

void mandelbrot::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read().range(16, 16);
}

void mandelbrot::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read().range(17, 17);
}

void mandelbrot::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read().range(18, 18);
}

void mandelbrot::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void mandelbrot::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read().range(23, 23);
}

void mandelbrot::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read().range(24, 24);
}

void mandelbrot::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read().range(28, 28);
}

void mandelbrot::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read().range(29, 29);
}

void mandelbrot::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read().range(30, 30);
}

void mandelbrot::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read().range(6, 6);
}

void mandelbrot::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read().range(7, 7);
}

void mandelbrot::thread_ap_condition_110() {
    ap_condition_110 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(cy_ap_vld.read(), ap_const_logic_0) || esl_seteq<1,1,1>(cx_ap_vld.read(), ap_const_logic_0));
}

void mandelbrot::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state31.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mandelbrot::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mandelbrot::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state31.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mandelbrot::thread_cx_ap_ack() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_condition_110.read(), ap_const_boolean_1))) {
        cx_ap_ack = ap_const_logic_1;
    } else {
        cx_ap_ack = ap_const_logic_0;
    }
}

void mandelbrot::thread_cx_blk_n() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        cx_blk_n = cx_ap_vld.read();
    } else {
        cx_blk_n = ap_const_logic_1;
    }
}

void mandelbrot::thread_cy_ap_ack() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_condition_110.read(), ap_const_boolean_1))) {
        cy_ap_ack = ap_const_logic_1;
    } else {
        cy_ap_ack = ap_const_logic_0;
    }
}

void mandelbrot::thread_cy_blk_n() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        cy_blk_n = cy_ap_vld.read();
    } else {
        cy_blk_n = ap_const_logic_1;
    }
}

void mandelbrot::thread_grp_fu_110_opcode() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        grp_fu_110_opcode = ap_const_lv2_1;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state25.read())))) {
        grp_fu_110_opcode = ap_const_lv2_0;
    } else {
        grp_fu_110_opcode = "XX";
    }
}

void mandelbrot::thread_grp_fu_110_p0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()))) {
        grp_fu_110_p0 = reg_148.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state25.read())))) {
        grp_fu_110_p0 = reg_138.read();
    } else {
        grp_fu_110_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandelbrot::thread_grp_fu_110_p1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        grp_fu_110_p1 = cy_read_reg_215.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()))) {
        grp_fu_110_p1 = cx_read_reg_221.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state25.read())))) {
        grp_fu_110_p1 = reg_143.read();
    } else {
        grp_fu_110_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandelbrot::thread_grp_fu_114_p0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()))) {
        grp_fu_114_p0 = reg_148.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        grp_fu_114_p0 = tmp_5_reg_236.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        grp_fu_114_p0 = t_reg_90.read();
    } else {
        grp_fu_114_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandelbrot::thread_grp_fu_114_p1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()))) {
        grp_fu_114_p1 = reg_148.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        grp_fu_114_p1 = y_reg_100.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        grp_fu_114_p1 = t_reg_90.read();
    } else {
        grp_fu_114_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandelbrot::thread_grp_fu_120_p0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()))) {
        grp_fu_120_p0 = y_1_reg_241.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        grp_fu_120_p0 = y_reg_100.read();
    } else {
        grp_fu_120_p0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandelbrot::thread_grp_fu_120_p1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state19.read()))) {
        grp_fu_120_p1 = y_1_reg_241.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        grp_fu_120_p1 = y_reg_100.read();
    } else {
        grp_fu_120_p1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mandelbrot::thread_i_1_fu_164_p2() {
    i_1_fu_164_p2 = (!i_reg_78.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(i_reg_78.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void mandelbrot::thread_notlhs_fu_187_p2() {
    notlhs_fu_187_p2 = (!tmp_4_fu_173_p4.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_4_fu_173_p4.read() != ap_const_lv11_7FF);
}

void mandelbrot::thread_notrhs_fu_193_p2() {
    notrhs_fu_193_p2 = (!tmp_7_fu_183_p1.read().is_01() || !ap_const_lv52_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_7_fu_183_p1.read() == ap_const_lv52_0);
}

void mandelbrot::thread_tmp_10_fu_199_p2() {
    tmp_10_fu_199_p2 = (notrhs_fu_193_p2.read() | notlhs_fu_187_p2.read());
}

void mandelbrot::thread_tmp_12_fu_205_p2() {
    tmp_12_fu_205_p2 = (tmp_10_fu_199_p2.read() & tmp_11_fu_133_p2.read());
}

void mandelbrot::thread_tmp_13_fu_211_p1() {
    tmp_13_fu_211_p1 = i_reg_78.read().range(8-1, 0);
}

void mandelbrot::thread_tmp_4_fu_173_p4() {
    tmp_4_fu_173_p4 = tmp_to_int_fu_170_p1.read().range(62, 52);
}

void mandelbrot::thread_tmp_7_fu_183_p1() {
    tmp_7_fu_183_p1 = tmp_to_int_fu_170_p1.read().range(52-1, 0);
}

void mandelbrot::thread_tmp_fu_156_p3() {
    tmp_fu_156_p3 = i_reg_78.read().range(8, 8);
}

void mandelbrot::thread_tmp_to_int_fu_170_p1() {
    tmp_to_int_fu_170_p1 = tmp_s_reg_248.read();
}

void mandelbrot::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_condition_110.read(), ap_const_boolean_1)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(tmp_fu_156_p3.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_fsm_state30;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            if ((!esl_seteq<1,1,1>(tmp_reg_227.read(), ap_const_lv1_0) || !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_205_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state31;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<31>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void mandelbrot::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cx\" :  \"" << cx.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cx_ap_vld\" :  \"" << cx_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"cx_ap_ack\" :  \"" << cx_ap_ack.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cy\" :  \"" << cy.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cy_ap_vld\" :  \"" << cy_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"cy_ap_ack\" :  \"" << cy_ap_ack.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

