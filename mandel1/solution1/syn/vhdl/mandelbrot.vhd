-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mandelbrot is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cx : IN STD_LOGIC_VECTOR (63 downto 0);
    cx_ap_vld : IN STD_LOGIC;
    cx_ap_ack : OUT STD_LOGIC;
    cy : IN STD_LOGIC_VECTOR (63 downto 0);
    cy_ap_vld : IN STD_LOGIC;
    cy_ap_ack : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of mandelbrot is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mandelbrot,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=3729,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=36,HLS_SYN_FF=2224,HLS_SYN_LUT=3941}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv64_4000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4010000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cx_blk_n : STD_LOGIC;
    signal cy_blk_n : STD_LOGIC;
    signal grp_fu_114_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_138 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_120_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_143 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_110_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_148 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal cy_read_reg_215 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_110 : BOOLEAN;
    signal cx_read_reg_221 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_156_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_227 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_164_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_231 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_126_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_236 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_1_reg_241 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_s_reg_248 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_13_fu_211_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_12_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_78 : STD_LOGIC_VECTOR (8 downto 0);
    signal t_reg_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_reg_100 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_110_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_110_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_114_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_114_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_120_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_to_int_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_173_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_183_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal notrhs_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_110_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);

    component mandelbrot_dadddsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component mandelbrot_dmul_6cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component mandelbrot_dcmp_6dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mandelbrot_dadddsbkb_U1 : component mandelbrot_dadddsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_110_p0,
        din1 => grp_fu_110_p1,
        opcode => grp_fu_110_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_110_p2);

    mandelbrot_dmul_6cud_U2 : component mandelbrot_dmul_6cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_114_p0,
        din1 => grp_fu_114_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_114_p2);

    mandelbrot_dmul_6cud_U3 : component mandelbrot_dmul_6cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_120_p0,
        din1 => grp_fu_120_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_120_p2);

    mandelbrot_dmul_6cud_U4 : component mandelbrot_dmul_6cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t_reg_90,
        din1 => ap_const_lv64_4000000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_126_p2);

    mandelbrot_dcmp_6dEe_U5 : component mandelbrot_dcmp_6dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_s_reg_248,
        din1 => ap_const_lv64_4010000000000000,
        opcode => ap_const_lv5_2,
        dout => tmp_11_fu_133_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state30) and (tmp_reg_227 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_12_fu_205_p2))) then 
                i_reg_78 <= i_1_reg_231;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_110 = ap_const_boolean_1)))) then 
                i_reg_78 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    t_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state30) and (tmp_reg_227 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_12_fu_205_p2))) then 
                t_reg_90 <= reg_148;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_110 = ap_const_boolean_1)))) then 
                t_reg_90 <= cx;
            end if; 
        end if;
    end process;

    y_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state30) and (tmp_reg_227 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_12_fu_205_p2))) then 
                y_reg_100 <= y_1_reg_241;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_110 = ap_const_boolean_1)))) then 
                y_reg_100 <= cy;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state30) and (not((tmp_reg_227 = ap_const_lv1_0)) or not((ap_const_lv1_0 = tmp_12_fu_205_p2))))) then
                ap_return <= tmp_13_fu_211_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_110 = ap_const_boolean_1)))) then
                cx_read_reg_221 <= cx;
                cy_read_reg_215 <= cy;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_1_reg_231 <= i_1_fu_164_p2;
                tmp_reg_227 <= i_reg_78(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state24)))) then
                reg_138 <= grp_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state24)))) then
                reg_143 <= grp_fu_120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)))) then
                reg_148 <= grp_fu_110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then
                tmp_5_reg_236 <= grp_fu_126_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state29))) then
                tmp_s_reg_248 <= grp_fu_110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state18))) then
                y_1_reg_241 <= grp_fu_110_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_condition_110, tmp_fu_156_p3, tmp_reg_227, tmp_12_fu_205_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_condition_110 = ap_const_boolean_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((tmp_fu_156_p3 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if ((not((tmp_reg_227 = ap_const_lv1_0)) or not((ap_const_lv1_0 = tmp_12_fu_205_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23 downto 23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state29 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29 downto 29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30 downto 30);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);

    ap_condition_110_assign_proc : process(ap_start, cx_ap_vld, cy_ap_vld)
    begin
                ap_condition_110 <= ((ap_start = ap_const_logic_0) or (cy_ap_vld = ap_const_logic_0) or (cx_ap_vld = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state31)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state31))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state31)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state31))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cx_ap_ack_assign_proc : process(ap_CS_fsm_state1, ap_condition_110)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_110 = ap_const_boolean_1)))) then 
            cx_ap_ack <= ap_const_logic_1;
        else 
            cx_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    cx_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, cx_ap_vld)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            cx_blk_n <= cx_ap_vld;
        else 
            cx_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cy_ap_ack_assign_proc : process(ap_CS_fsm_state1, ap_condition_110)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_110 = ap_const_boolean_1)))) then 
            cy_ap_ack <= ap_const_logic_1;
        else 
            cy_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    cy_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, cy_ap_vld)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            cy_blk_n <= cy_ap_vld;
        else 
            cy_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_110_opcode_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state25)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            grp_fu_110_opcode <= ap_const_lv2_1;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state25)))) then 
            grp_fu_110_opcode <= ap_const_lv2_0;
        else 
            grp_fu_110_opcode <= "XX";
        end if; 
    end process;


    grp_fu_110_p0_assign_proc : process(reg_138, ap_CS_fsm_state13, reg_148, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state25)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            grp_fu_110_p0 <= reg_148;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state25)))) then 
            grp_fu_110_p0 <= reg_138;
        else 
            grp_fu_110_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_110_p1_assign_proc : process(ap_CS_fsm_state13, reg_143, cy_read_reg_215, cx_read_reg_221, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state25)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            grp_fu_110_p1 <= cy_read_reg_215;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            grp_fu_110_p1 <= cx_read_reg_221;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state25)))) then 
            grp_fu_110_p1 <= reg_143;
        else 
            grp_fu_110_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_114_p0_assign_proc : process(reg_148, ap_CS_fsm_state2, tmp_5_reg_236, t_reg_90, ap_CS_fsm_state8, ap_CS_fsm_state19)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            grp_fu_114_p0 <= reg_148;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            grp_fu_114_p0 <= tmp_5_reg_236;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            grp_fu_114_p0 <= t_reg_90;
        else 
            grp_fu_114_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_114_p1_assign_proc : process(reg_148, ap_CS_fsm_state2, t_reg_90, y_reg_100, ap_CS_fsm_state8, ap_CS_fsm_state19)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            grp_fu_114_p1 <= reg_148;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            grp_fu_114_p1 <= y_reg_100;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            grp_fu_114_p1 <= t_reg_90;
        else 
            grp_fu_114_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_120_p0_assign_proc : process(ap_CS_fsm_state2, y_1_reg_241, y_reg_100, ap_CS_fsm_state19)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            grp_fu_120_p0 <= y_1_reg_241;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            grp_fu_120_p0 <= y_reg_100;
        else 
            grp_fu_120_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_120_p1_assign_proc : process(ap_CS_fsm_state2, y_1_reg_241, y_reg_100, ap_CS_fsm_state19)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            grp_fu_120_p1 <= y_1_reg_241;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            grp_fu_120_p1 <= y_reg_100;
        else 
            grp_fu_120_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_164_p2 <= std_logic_vector(unsigned(i_reg_78) + unsigned(ap_const_lv9_1));
    notlhs_fu_187_p2 <= "0" when (tmp_4_fu_173_p4 = ap_const_lv11_7FF) else "1";
    notrhs_fu_193_p2 <= "1" when (tmp_7_fu_183_p1 = ap_const_lv52_0) else "0";
    tmp_10_fu_199_p2 <= (notrhs_fu_193_p2 or notlhs_fu_187_p2);
    tmp_12_fu_205_p2 <= (tmp_10_fu_199_p2 and tmp_11_fu_133_p2);
    tmp_13_fu_211_p1 <= i_reg_78(8 - 1 downto 0);
    tmp_4_fu_173_p4 <= tmp_to_int_fu_170_p1(62 downto 52);
    tmp_7_fu_183_p1 <= tmp_to_int_fu_170_p1(52 - 1 downto 0);
    tmp_fu_156_p3 <= i_reg_78(8 downto 8);
    tmp_to_int_fu_170_p1 <= tmp_s_reg_248;
end behav;
