// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mandelbrot,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.464000,HLS_SYN_LAT=49,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=39,HLS_SYN_FF=10268,HLS_SYN_LUT=14431}" *)

module mandelbrot (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 72'b1;
parameter    ap_ST_fsm_state2 = 72'b10;
parameter    ap_ST_fsm_state3 = 72'b100;
parameter    ap_ST_fsm_state4 = 72'b1000;
parameter    ap_ST_fsm_state5 = 72'b10000;
parameter    ap_ST_fsm_state6 = 72'b100000;
parameter    ap_ST_fsm_state7 = 72'b1000000;
parameter    ap_ST_fsm_state8 = 72'b10000000;
parameter    ap_ST_fsm_state9 = 72'b100000000;
parameter    ap_ST_fsm_state10 = 72'b1000000000;
parameter    ap_ST_fsm_state11 = 72'b10000000000;
parameter    ap_ST_fsm_state12 = 72'b100000000000;
parameter    ap_ST_fsm_state13 = 72'b1000000000000;
parameter    ap_ST_fsm_state14 = 72'b10000000000000;
parameter    ap_ST_fsm_state15 = 72'b100000000000000;
parameter    ap_ST_fsm_state16 = 72'b1000000000000000;
parameter    ap_ST_fsm_state17 = 72'b10000000000000000;
parameter    ap_ST_fsm_state18 = 72'b100000000000000000;
parameter    ap_ST_fsm_state19 = 72'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 72'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 72'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 72'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 72'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 72'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 72'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 72'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 72'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 72'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 72'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 72'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 72'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 72'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 72'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 72'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 72'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 72'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 72'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 72'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 72'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 72'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 72'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 72'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 72'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 72'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state45 = 72'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state46 = 72'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state47 = 72'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state48 = 72'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage0 = 72'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage1 = 72'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage2 = 72'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage3 = 72'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage4 = 72'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage5 = 72'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage6 = 72'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage7 = 72'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage8 = 72'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage9 = 72'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage10 = 72'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage11 = 72'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage12 = 72'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage13 = 72'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage14 = 72'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage15 = 72'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage16 = 72'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage17 = 72'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage18 = 72'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage19 = 72'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage20 = 72'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage21 = 72'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage22 = 72'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state73 = 72'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_const_lv32_35 = 32'b110101;
parameter    ap_const_lv32_3A = 32'b111010;
parameter    ap_const_lv32_43 = 32'b1000011;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv32_46 = 32'b1000110;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_47 = 32'b1000111;
parameter    ap_const_lv64_C000000000000000 = 64'b1100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_2B = 32'b101011;
parameter    ap_const_lv32_36 = 32'b110110;
parameter    ap_const_lv64_3FF0000000000000 = 64'b11111111110000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_4008000000000000 = 64'b100000000001000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv64_4000000000000000 = 64'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_4084000000000000 = 64'b100000010000100000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv64_407E000000000000 = 64'b100000001111110000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_4010000000000000 = 64'b100000000010000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv24_1 = 24'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv11_7FF = 11'b11111111111;
parameter    ap_const_lv52_0 = 52'b0000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_101 = 32'b100000001;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv5_2 = 5'b10;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [71:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] cx;
wire   [31:0] cy;
reg   [31:0] tmp_6_reg_86;
reg   [63:0] t_reg_98;
reg   [63:0] y_reg_110;
wire   [63:0] grp_fu_133_p2;
reg   [63:0] reg_186;
wire   [0:0] ap_CS_fsm_state43;
wire   [0:0] ap_CS_fsm_pp0_stage5;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] icmp_reg_323;
wire   [0:0] ap_CS_fsm_pp0_stage10;
wire   [0:0] ap_CS_fsm_pp0_stage19;
wire   [63:0] grp_fu_138_p2;
reg   [63:0] reg_192;
wire   [63:0] grp_fu_122_p2;
reg   [63:0] reg_198;
wire   [0:0] ap_CS_fsm_pp0_stage14;
wire   [63:0] grp_fu_178_p1;
reg   [63:0] tmp_reg_293;
wire   [0:0] ap_CS_fsm_state6;
wire   [63:0] grp_fu_182_p1;
reg   [63:0] tmp_3_reg_298;
wire   [63:0] grp_fu_162_p2;
reg   [63:0] tmp_1_reg_303;
wire   [0:0] ap_CS_fsm_state37;
wire   [63:0] grp_fu_167_p2;
reg   [63:0] tmp_4_reg_308;
reg   [63:0] dcx_reg_313;
wire   [0:0] ap_CS_fsm_state48;
wire   [63:0] grp_fu_127_p2;
reg   [63:0] dcy_reg_318;
wire   [0:0] icmp_fu_216_p2;
wire   [0:0] ap_CS_fsm_pp0_stage0;
wire   [63:0] grp_fu_147_p2;
wire   [31:0] tmp_6_op_fu_222_p2;
reg   [31:0] tmp_6_op_reg_332;
reg   [63:0] y_1_reg_337;
wire   [31:0] tmp_16_fu_270_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] ap_CS_fsm_pp0_stage22;
reg   [31:0] tmp_6_phi_fu_90_p4;
reg   [63:0] t_phi_fu_102_p4;
reg   [63:0] y_phi_fu_114_p4;
wire   [0:0] ap_CS_fsm_state73;
reg   [63:0] grp_fu_122_p0;
reg   [63:0] grp_fu_122_p1;
wire   [0:0] ap_CS_fsm_state44;
wire   [0:0] ap_CS_fsm_pp0_stage6;
reg   [63:0] grp_fu_127_p0;
reg   [63:0] grp_fu_127_p1;
reg   [63:0] grp_fu_133_p0;
reg   [63:0] grp_fu_133_p1;
wire   [0:0] ap_CS_fsm_state38;
reg   [63:0] grp_fu_138_p0;
reg   [63:0] grp_fu_138_p1;
wire   [0:0] ap_CS_fsm_state7;
wire   [23:0] tmp_7_fu_206_p4;
wire   [63:0] tmp_14_to_int_fu_228_p1;
wire   [10:0] tmp_17_fu_232_p4;
wire   [51:0] tmp_18_fu_242_p1;
wire   [0:0] notrhs_fu_252_p2;
wire   [0:0] notlhs_fu_246_p2;
wire   [0:0] tmp_19_fu_258_p2;
wire   [0:0] tmp_20_fu_172_p2;
wire   [0:0] tmp_21_fu_264_p2;
reg   [1:0] grp_fu_122_opcode;
reg   [71:0] ap_NS_fsm;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 72'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

mandelbrot_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
mandelbrot_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(tmp_6_reg_86),
    .cx(cx),
    .cy(cy)
);

mandelbrot_dadddsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dadddsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_122_p0),
    .din1(grp_fu_122_p1),
    .opcode(grp_fu_122_opcode),
    .ce(1'b1),
    .dout(grp_fu_122_p2)
);

mandelbrot_dadd_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dadd_6cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_127_p0),
    .din1(grp_fu_127_p1),
    .ce(1'b1),
    .dout(grp_fu_127_p2)
);

mandelbrot_dmul_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dmul_6dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_133_p0),
    .din1(grp_fu_133_p1),
    .ce(1'b1),
    .dout(grp_fu_133_p2)
);

mandelbrot_dmul_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dmul_6dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_138_p0),
    .din1(grp_fu_138_p1),
    .ce(1'b1),
    .dout(grp_fu_138_p2)
);

mandelbrot_dmul_6dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_dmul_6dEe_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(t_phi_fu_102_p4),
    .din1(ap_const_lv64_4000000000000000),
    .ce(1'b1),
    .dout(grp_fu_147_p2)
);

mandelbrot_ddiv_6eOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_ddiv_6eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_reg_293),
    .din1(ap_const_lv64_4084000000000000),
    .ce(1'b1),
    .dout(grp_fu_162_p2)
);

mandelbrot_ddiv_6eOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
mandelbrot_ddiv_6eOg_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_reg_298),
    .din1(ap_const_lv64_407E000000000000),
    .ce(1'b1),
    .dout(grp_fu_167_p2)
);

mandelbrot_dcmp_6fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
mandelbrot_dcmp_6fYi_U8(
    .din0(grp_fu_122_p2),
    .din1(ap_const_lv64_4010000000000000),
    .opcode(ap_const_lv5_2),
    .dout(tmp_20_fu_172_p2)
);

mandelbrot_sitodpg8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mandelbrot_sitodpg8j_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(cx),
    .ce(1'b1),
    .dout(grp_fu_178_p1)
);

mandelbrot_sitodpg8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mandelbrot_sitodpg8j_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(cy),
    .ce(1'b1),
    .dout(grp_fu_182_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == icmp_fu_216_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state48)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage22))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state48) | ((icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage22)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        t_reg_98 <= reg_198;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        t_reg_98 <= ap_const_lv64_0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        tmp_6_reg_86 <= tmp_16_fu_270_p3;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        tmp_6_reg_86 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        y_reg_110 <= y_1_reg_337;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        y_reg_110 <= ap_const_lv64_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        dcx_reg_313 <= grp_fu_122_p2;
        dcy_reg_318 <= grp_fu_127_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        icmp_reg_323 <= icmp_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(icmp_reg_323 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & ~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b1 == ap_enable_reg_pp0_iter0) & ~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage19)))) begin
        reg_186 <= grp_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(icmp_reg_323 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & ~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage19)))) begin
        reg_192 <= grp_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & ~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b1 == ap_enable_reg_pp0_iter0) & ~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage14)))) begin
        reg_198 <= grp_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        tmp_1_reg_303 <= grp_fu_162_p2;
        tmp_4_reg_308 <= grp_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_3_reg_298 <= grp_fu_182_p1;
        tmp_reg_293 <= grp_fu_178_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & ~(icmp_reg_323 == 1'b0))) begin
        tmp_6_op_reg_332 <= tmp_6_op_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & ~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        y_1_reg_337 <= grp_fu_127_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & ~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_122_opcode = ap_const_lv2_1;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & ~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b1 == ap_enable_reg_pp0_iter0) & ~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage19)) | (1'b1 == ap_CS_fsm_state44))) begin
        grp_fu_122_opcode = ap_const_lv2_0;
    end else begin
        grp_fu_122_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage19))) begin
        grp_fu_122_p0 = grp_fu_133_p2;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        grp_fu_122_p0 = grp_fu_122_p2;
    end else if (((1'b1 == ap_CS_fsm_state44) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        grp_fu_122_p0 = reg_186;
    end else begin
        grp_fu_122_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage19))) begin
        grp_fu_122_p1 = grp_fu_138_p2;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        grp_fu_122_p1 = dcx_reg_313;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_122_p1 = reg_192;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_122_p1 = ap_const_lv64_C000000000000000;
    end else begin
        grp_fu_122_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        grp_fu_127_p0 = grp_fu_133_p2;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_127_p0 = reg_192;
    end else begin
        grp_fu_127_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        grp_fu_127_p1 = dcy_reg_318;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_127_p1 = ap_const_lv64_3FF0000000000000;
    end else begin
        grp_fu_127_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        grp_fu_133_p0 = grp_fu_122_p2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_133_p0 = grp_fu_147_p2;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_133_p0 = t_phi_fu_102_p4;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_133_p0 = tmp_1_reg_303;
    end else begin
        grp_fu_133_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        grp_fu_133_p1 = grp_fu_122_p2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        grp_fu_133_p1 = y_reg_110;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_133_p1 = t_phi_fu_102_p4;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_133_p1 = ap_const_lv64_4008000000000000;
    end else begin
        grp_fu_133_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        grp_fu_138_p0 = grp_fu_127_p2;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_138_p0 = y_phi_fu_114_p4;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_138_p0 = tmp_4_reg_308;
    end else begin
        grp_fu_138_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        grp_fu_138_p1 = grp_fu_127_p2;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_138_p1 = y_phi_fu_114_p4;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_138_p1 = ap_const_lv64_C000000000000000;
    end else begin
        grp_fu_138_p1 = 'bx;
    end
end

always @ (*) begin
    if ((~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        t_phi_fu_102_p4 = reg_198;
    end else begin
        t_phi_fu_102_p4 = t_reg_98;
    end
end

always @ (*) begin
    if ((~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        tmp_6_phi_fu_90_p4 = tmp_16_fu_270_p3;
    end else begin
        tmp_6_phi_fu_90_p4 = tmp_6_reg_86;
    end
end

always @ (*) begin
    if ((~(icmp_reg_323 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        y_phi_fu_114_p4 = y_1_reg_337;
    end else begin
        y_phi_fu_114_p4 = y_reg_110;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == icmp_fu_216_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage2;
        end
        ap_ST_fsm_pp0_stage2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage3;
        end
        ap_ST_fsm_pp0_stage3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage4;
        end
        ap_ST_fsm_pp0_stage4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage5;
        end
        ap_ST_fsm_pp0_stage5 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage6;
        end
        ap_ST_fsm_pp0_stage6 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage7;
        end
        ap_ST_fsm_pp0_stage7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage8;
        end
        ap_ST_fsm_pp0_stage8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage9;
        end
        ap_ST_fsm_pp0_stage9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage10;
        end
        ap_ST_fsm_pp0_stage10 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage11;
        end
        ap_ST_fsm_pp0_stage11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage12;
        end
        ap_ST_fsm_pp0_stage12 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage13;
        end
        ap_ST_fsm_pp0_stage13 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage14;
        end
        ap_ST_fsm_pp0_stage14 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage15;
        end
        ap_ST_fsm_pp0_stage15 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage16;
        end
        ap_ST_fsm_pp0_stage16 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage17;
        end
        ap_ST_fsm_pp0_stage17 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage18;
        end
        ap_ST_fsm_pp0_stage18 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage19;
        end
        ap_ST_fsm_pp0_stage19 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage20;
        end
        ap_ST_fsm_pp0_stage20 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage21;
        end
        ap_ST_fsm_pp0_stage21 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage22;
        end
        ap_ST_fsm_pp0_stage22 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_30];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[ap_const_lv32_3A];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[ap_const_lv32_3E];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[ap_const_lv32_43];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[ap_const_lv32_46];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[ap_const_lv32_35];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[ap_const_lv32_36];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state37 = ap_CS_fsm[ap_const_lv32_24];

assign ap_CS_fsm_state38 = ap_CS_fsm[ap_const_lv32_25];

assign ap_CS_fsm_state43 = ap_CS_fsm[ap_const_lv32_2A];

assign ap_CS_fsm_state44 = ap_CS_fsm[ap_const_lv32_2B];

assign ap_CS_fsm_state48 = ap_CS_fsm[ap_const_lv32_2F];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state73 = ap_CS_fsm[ap_const_lv32_47];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_fu_216_p2 = (($signed(tmp_7_fu_206_p4) < $signed(24'b1)) ? 1'b1 : 1'b0);

assign notlhs_fu_246_p2 = ((tmp_17_fu_232_p4 != ap_const_lv11_7FF) ? 1'b1 : 1'b0);

assign notrhs_fu_252_p2 = ((tmp_18_fu_242_p1 == ap_const_lv52_0) ? 1'b1 : 1'b0);

assign tmp_14_to_int_fu_228_p1 = grp_fu_122_p2;

assign tmp_16_fu_270_p3 = ((tmp_21_fu_264_p2[0:0] === 1'b1) ? ap_const_lv32_101 : tmp_6_op_reg_332);

assign tmp_17_fu_232_p4 = {{tmp_14_to_int_fu_228_p1[ap_const_lv32_3E : ap_const_lv32_34]}};

assign tmp_18_fu_242_p1 = tmp_14_to_int_fu_228_p1[51:0];

assign tmp_19_fu_258_p2 = (notrhs_fu_252_p2 | notlhs_fu_246_p2);

assign tmp_21_fu_264_p2 = (tmp_19_fu_258_p2 & tmp_20_fu_172_p2);

assign tmp_6_op_fu_222_p2 = (ap_const_lv32_1 + tmp_6_reg_86);

assign tmp_7_fu_206_p4 = {{tmp_6_phi_fu_90_p4[ap_const_lv32_1F : ap_const_lv32_8]}};

endmodule //mandelbrot
