// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Mat2AXIvideo.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Mat2AXIvideo::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Mat2AXIvideo::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Mat2AXIvideo::ap_ST_fsm_state1 = "1";
const sc_lv<4> Mat2AXIvideo::ap_ST_fsm_state2 = "10";
const sc_lv<4> Mat2AXIvideo::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> Mat2AXIvideo::ap_ST_fsm_state6 = "1000";
const sc_lv<32> Mat2AXIvideo::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Mat2AXIvideo::ap_const_lv1_1 = "1";
const bool Mat2AXIvideo::ap_const_boolean_1 = true;
const sc_lv<1> Mat2AXIvideo::ap_const_lv1_0 = "0";
const sc_lv<2> Mat2AXIvideo::ap_const_lv2_0 = "00";
const sc_lv<2> Mat2AXIvideo::ap_const_lv2_2 = "10";
const sc_lv<2> Mat2AXIvideo::ap_const_lv2_3 = "11";
const sc_lv<2> Mat2AXIvideo::ap_const_lv2_1 = "1";
const sc_lv<32> Mat2AXIvideo::ap_const_lv32_2 = "10";
const sc_lv<32> Mat2AXIvideo::ap_const_lv32_1 = "1";
const sc_lv<32> Mat2AXIvideo::ap_const_lv32_3 = "11";
const sc_lv<11> Mat2AXIvideo::ap_const_lv11_0 = "00000000000";
const sc_lv<11> Mat2AXIvideo::ap_const_lv11_7FF = "11111111111";
const sc_lv<11> Mat2AXIvideo::ap_const_lv11_1 = "1";

Mat2AXIvideo::Mat2AXIvideo(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_499);
    sensitive << ( video_out_V_data_V_1_ack_in );
    sensitive << ( video_out_V_keep_V_1_ack_in );
    sensitive << ( video_out_V_strb_V_1_ack_in );
    sensitive << ( video_out_V_user_V_1_ack_in );
    sensitive << ( video_out_V_last_V_1_ack_in );
    sensitive << ( video_out_V_id_V_1_ack_in );
    sensitive << ( video_out_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_condition_514);
    sensitive << ( img_1_data_stream_0_empty_n );
    sensitive << ( img_1_data_stream_1_empty_n );
    sensitive << ( exitcond_i_i_reg_268 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( exitcond1_i_i_fu_192_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_condition_499 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( exitcond1_i_i_fu_192_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_condition_499 );

    SC_METHOD(thread_axi_last_V_fu_214_p2);
    sensitive << ( video_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_268 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268 );
    sensitive << ( p_1_i_i_reg_162 );
    sensitive << ( r_V_fu_181_p2 );
    sensitive << ( exitcond_i_i_fu_203_p2 );
    sensitive << ( ap_condition_514 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_exitcond1_i_i_fu_192_p2);
    sensitive << ( tmp_fu_173_p1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_condition_499 );
    sensitive << ( p_i_i_reg_151 );

    SC_METHOD(thread_exitcond_i_i_fu_203_p2);
    sensitive << ( video_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_268 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268 );
    sensitive << ( p_1_i_i_reg_162 );
    sensitive << ( tmp_26_fu_177_p1 );
    sensitive << ( ap_condition_514 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_V_fu_197_p2);
    sensitive << ( p_i_i_reg_151 );

    SC_METHOD(thread_img_1_data_stream_0_blk_n);
    sensitive << ( img_1_data_stream_0_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_268 );

    SC_METHOD(thread_img_1_data_stream_0_read);
    sensitive << ( video_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_268 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268 );
    sensitive << ( ap_condition_514 );

    SC_METHOD(thread_img_1_data_stream_1_blk_n);
    sensitive << ( img_1_data_stream_1_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_268 );

    SC_METHOD(thread_img_1_data_stream_1_read);
    sensitive << ( video_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_268 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268 );
    sensitive << ( ap_condition_514 );

    SC_METHOD(thread_j_V_fu_208_p2);
    sensitive << ( p_1_i_i_reg_162 );

    SC_METHOD(thread_r_V_fu_181_p2);
    sensitive << ( tmp_26_fu_177_p1 );

    SC_METHOD(thread_tmp_26_fu_177_p1);
    sensitive << ( cols );

    SC_METHOD(thread_tmp_data_V_fu_223_p3);
    sensitive << ( img_1_data_stream_0_dout );
    sensitive << ( img_1_data_stream_1_dout );

    SC_METHOD(thread_tmp_fu_173_p1);
    sensitive << ( rows );

    SC_METHOD(thread_video_out_TDATA);
    sensitive << ( video_out_V_data_V_1_data_out );

    SC_METHOD(thread_video_out_TDATA_blk_n);
    sensitive << ( video_out_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_268 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268 );

    SC_METHOD(thread_video_out_TDEST);
    sensitive << ( video_out_V_dest_V_1_data_out );

    SC_METHOD(thread_video_out_TID);
    sensitive << ( video_out_V_id_V_1_data_out );

    SC_METHOD(thread_video_out_TKEEP);
    sensitive << ( video_out_V_keep_V_1_data_out );

    SC_METHOD(thread_video_out_TLAST);
    sensitive << ( video_out_V_last_V_1_data_out );

    SC_METHOD(thread_video_out_TSTRB);
    sensitive << ( video_out_V_strb_V_1_data_out );

    SC_METHOD(thread_video_out_TUSER);
    sensitive << ( video_out_V_user_V_1_data_out );

    SC_METHOD(thread_video_out_TVALID);
    sensitive << ( video_out_V_dest_V_1_state );

    SC_METHOD(thread_video_out_V_data_V_1_ack_in);
    sensitive << ( video_out_V_data_V_1_state );

    SC_METHOD(thread_video_out_V_data_V_1_ack_out);
    sensitive << ( video_out_TREADY );

    SC_METHOD(thread_video_out_V_data_V_1_data_out);
    sensitive << ( video_out_V_data_V_1_payload_A );
    sensitive << ( video_out_V_data_V_1_payload_B );
    sensitive << ( video_out_V_data_V_1_sel );

    SC_METHOD(thread_video_out_V_data_V_1_load_A);
    sensitive << ( video_out_V_data_V_1_sel_wr );
    sensitive << ( video_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_video_out_V_data_V_1_load_B);
    sensitive << ( video_out_V_data_V_1_sel_wr );
    sensitive << ( video_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_video_out_V_data_V_1_sel);
    sensitive << ( video_out_V_data_V_1_sel_rd );

    SC_METHOD(thread_video_out_V_data_V_1_state_cmp_full);
    sensitive << ( video_out_V_data_V_1_state );

    SC_METHOD(thread_video_out_V_data_V_1_vld_in);
    sensitive << ( video_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_268 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268 );
    sensitive << ( ap_condition_514 );

    SC_METHOD(thread_video_out_V_data_V_1_vld_out);
    sensitive << ( video_out_V_data_V_1_state );

    SC_METHOD(thread_video_out_V_dest_V_1_ack_in);
    sensitive << ( video_out_V_dest_V_1_state );

    SC_METHOD(thread_video_out_V_dest_V_1_ack_out);
    sensitive << ( video_out_TREADY );

    SC_METHOD(thread_video_out_V_dest_V_1_data_out);
    sensitive << ( video_out_V_dest_V_1_sel );

    SC_METHOD(thread_video_out_V_dest_V_1_sel);
    sensitive << ( video_out_V_dest_V_1_sel_rd );

    SC_METHOD(thread_video_out_V_dest_V_1_vld_in);
    sensitive << ( video_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_268 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268 );
    sensitive << ( ap_condition_514 );

    SC_METHOD(thread_video_out_V_dest_V_1_vld_out);
    sensitive << ( video_out_V_dest_V_1_state );

    SC_METHOD(thread_video_out_V_id_V_1_ack_in);
    sensitive << ( video_out_V_id_V_1_state );

    SC_METHOD(thread_video_out_V_id_V_1_ack_out);
    sensitive << ( video_out_TREADY );

    SC_METHOD(thread_video_out_V_id_V_1_data_out);
    sensitive << ( video_out_V_id_V_1_sel );

    SC_METHOD(thread_video_out_V_id_V_1_sel);
    sensitive << ( video_out_V_id_V_1_sel_rd );

    SC_METHOD(thread_video_out_V_id_V_1_vld_in);
    sensitive << ( video_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_268 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268 );
    sensitive << ( ap_condition_514 );

    SC_METHOD(thread_video_out_V_id_V_1_vld_out);
    sensitive << ( video_out_V_id_V_1_state );

    SC_METHOD(thread_video_out_V_keep_V_1_ack_in);
    sensitive << ( video_out_V_keep_V_1_state );

    SC_METHOD(thread_video_out_V_keep_V_1_ack_out);
    sensitive << ( video_out_TREADY );

    SC_METHOD(thread_video_out_V_keep_V_1_data_out);
    sensitive << ( video_out_V_keep_V_1_sel );

    SC_METHOD(thread_video_out_V_keep_V_1_sel);
    sensitive << ( video_out_V_keep_V_1_sel_rd );

    SC_METHOD(thread_video_out_V_keep_V_1_vld_in);
    sensitive << ( video_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_268 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268 );
    sensitive << ( ap_condition_514 );

    SC_METHOD(thread_video_out_V_keep_V_1_vld_out);
    sensitive << ( video_out_V_keep_V_1_state );

    SC_METHOD(thread_video_out_V_last_V_1_ack_in);
    sensitive << ( video_out_V_last_V_1_state );

    SC_METHOD(thread_video_out_V_last_V_1_ack_out);
    sensitive << ( video_out_TREADY );

    SC_METHOD(thread_video_out_V_last_V_1_data_out);
    sensitive << ( video_out_V_last_V_1_payload_A );
    sensitive << ( video_out_V_last_V_1_payload_B );
    sensitive << ( video_out_V_last_V_1_sel );

    SC_METHOD(thread_video_out_V_last_V_1_load_A);
    sensitive << ( video_out_V_last_V_1_sel_wr );
    sensitive << ( video_out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_video_out_V_last_V_1_load_B);
    sensitive << ( video_out_V_last_V_1_sel_wr );
    sensitive << ( video_out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_video_out_V_last_V_1_sel);
    sensitive << ( video_out_V_last_V_1_sel_rd );

    SC_METHOD(thread_video_out_V_last_V_1_state_cmp_full);
    sensitive << ( video_out_V_last_V_1_state );

    SC_METHOD(thread_video_out_V_last_V_1_vld_in);
    sensitive << ( video_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_268 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268 );
    sensitive << ( ap_condition_514 );

    SC_METHOD(thread_video_out_V_last_V_1_vld_out);
    sensitive << ( video_out_V_last_V_1_state );

    SC_METHOD(thread_video_out_V_strb_V_1_ack_in);
    sensitive << ( video_out_V_strb_V_1_state );

    SC_METHOD(thread_video_out_V_strb_V_1_ack_out);
    sensitive << ( video_out_TREADY );

    SC_METHOD(thread_video_out_V_strb_V_1_data_out);
    sensitive << ( video_out_V_strb_V_1_sel );

    SC_METHOD(thread_video_out_V_strb_V_1_sel);
    sensitive << ( video_out_V_strb_V_1_sel_rd );

    SC_METHOD(thread_video_out_V_strb_V_1_vld_in);
    sensitive << ( video_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_268 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268 );
    sensitive << ( ap_condition_514 );

    SC_METHOD(thread_video_out_V_strb_V_1_vld_out);
    sensitive << ( video_out_V_strb_V_1_state );

    SC_METHOD(thread_video_out_V_user_V_1_ack_in);
    sensitive << ( video_out_V_user_V_1_state );

    SC_METHOD(thread_video_out_V_user_V_1_ack_out);
    sensitive << ( video_out_TREADY );

    SC_METHOD(thread_video_out_V_user_V_1_data_out);
    sensitive << ( video_out_V_user_V_1_payload_A );
    sensitive << ( video_out_V_user_V_1_payload_B );
    sensitive << ( video_out_V_user_V_1_sel );

    SC_METHOD(thread_video_out_V_user_V_1_load_A);
    sensitive << ( video_out_V_user_V_1_sel_wr );
    sensitive << ( video_out_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_video_out_V_user_V_1_load_B);
    sensitive << ( video_out_V_user_V_1_sel_wr );
    sensitive << ( video_out_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_video_out_V_user_V_1_sel);
    sensitive << ( video_out_V_user_V_1_sel_rd );

    SC_METHOD(thread_video_out_V_user_V_1_state_cmp_full);
    sensitive << ( video_out_V_user_V_1_state );

    SC_METHOD(thread_video_out_V_user_V_1_vld_in);
    sensitive << ( video_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_268 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268 );
    sensitive << ( ap_condition_514 );

    SC_METHOD(thread_video_out_V_user_V_1_vld_out);
    sensitive << ( video_out_V_user_V_1_state );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( video_out_V_data_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_i_reg_268 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268 );
    sensitive << ( exitcond1_i_i_fu_192_p2 );
    sensitive << ( ap_condition_499 );
    sensitive << ( exitcond_i_i_fu_203_p2 );
    sensitive << ( ap_condition_514 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    video_out_V_data_V_1_sel_rd = SC_LOGIC_0;
    video_out_V_data_V_1_sel_wr = SC_LOGIC_0;
    video_out_V_data_V_1_state = "00";
    video_out_V_keep_V_1_sel_rd = SC_LOGIC_0;
    video_out_V_keep_V_1_state = "00";
    video_out_V_strb_V_1_sel_rd = SC_LOGIC_0;
    video_out_V_strb_V_1_state = "00";
    video_out_V_user_V_1_sel_rd = SC_LOGIC_0;
    video_out_V_user_V_1_sel_wr = SC_LOGIC_0;
    video_out_V_user_V_1_state = "00";
    video_out_V_last_V_1_sel_rd = SC_LOGIC_0;
    video_out_V_last_V_1_sel_wr = SC_LOGIC_0;
    video_out_V_last_V_1_state = "00";
    video_out_V_id_V_1_sel_rd = SC_LOGIC_0;
    video_out_V_id_V_1_state = "00";
    video_out_V_dest_V_1_sel_rd = SC_LOGIC_0;
    video_out_V_dest_V_1_state = "00";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Mat2AXIvideo_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, rows, "(port)rows");
    sc_trace(mVcdFile, cols, "(port)cols");
    sc_trace(mVcdFile, img_1_data_stream_0_dout, "(port)img_1_data_stream_0_dout");
    sc_trace(mVcdFile, img_1_data_stream_0_empty_n, "(port)img_1_data_stream_0_empty_n");
    sc_trace(mVcdFile, img_1_data_stream_0_read, "(port)img_1_data_stream_0_read");
    sc_trace(mVcdFile, img_1_data_stream_1_dout, "(port)img_1_data_stream_1_dout");
    sc_trace(mVcdFile, img_1_data_stream_1_empty_n, "(port)img_1_data_stream_1_empty_n");
    sc_trace(mVcdFile, img_1_data_stream_1_read, "(port)img_1_data_stream_1_read");
    sc_trace(mVcdFile, video_out_TDATA, "(port)video_out_TDATA");
    sc_trace(mVcdFile, video_out_TVALID, "(port)video_out_TVALID");
    sc_trace(mVcdFile, video_out_TREADY, "(port)video_out_TREADY");
    sc_trace(mVcdFile, video_out_TKEEP, "(port)video_out_TKEEP");
    sc_trace(mVcdFile, video_out_TSTRB, "(port)video_out_TSTRB");
    sc_trace(mVcdFile, video_out_TUSER, "(port)video_out_TUSER");
    sc_trace(mVcdFile, video_out_TLAST, "(port)video_out_TLAST");
    sc_trace(mVcdFile, video_out_TID, "(port)video_out_TID");
    sc_trace(mVcdFile, video_out_TDEST, "(port)video_out_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, video_out_V_data_V_1_data_out, "video_out_V_data_V_1_data_out");
    sc_trace(mVcdFile, video_out_V_data_V_1_vld_in, "video_out_V_data_V_1_vld_in");
    sc_trace(mVcdFile, video_out_V_data_V_1_vld_out, "video_out_V_data_V_1_vld_out");
    sc_trace(mVcdFile, video_out_V_data_V_1_ack_in, "video_out_V_data_V_1_ack_in");
    sc_trace(mVcdFile, video_out_V_data_V_1_ack_out, "video_out_V_data_V_1_ack_out");
    sc_trace(mVcdFile, video_out_V_data_V_1_payload_A, "video_out_V_data_V_1_payload_A");
    sc_trace(mVcdFile, video_out_V_data_V_1_payload_B, "video_out_V_data_V_1_payload_B");
    sc_trace(mVcdFile, video_out_V_data_V_1_sel_rd, "video_out_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, video_out_V_data_V_1_sel_wr, "video_out_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, video_out_V_data_V_1_sel, "video_out_V_data_V_1_sel");
    sc_trace(mVcdFile, video_out_V_data_V_1_load_A, "video_out_V_data_V_1_load_A");
    sc_trace(mVcdFile, video_out_V_data_V_1_load_B, "video_out_V_data_V_1_load_B");
    sc_trace(mVcdFile, video_out_V_data_V_1_state, "video_out_V_data_V_1_state");
    sc_trace(mVcdFile, video_out_V_data_V_1_state_cmp_full, "video_out_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, video_out_V_keep_V_1_data_out, "video_out_V_keep_V_1_data_out");
    sc_trace(mVcdFile, video_out_V_keep_V_1_vld_in, "video_out_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, video_out_V_keep_V_1_vld_out, "video_out_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, video_out_V_keep_V_1_ack_in, "video_out_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, video_out_V_keep_V_1_ack_out, "video_out_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, video_out_V_keep_V_1_sel_rd, "video_out_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, video_out_V_keep_V_1_sel, "video_out_V_keep_V_1_sel");
    sc_trace(mVcdFile, video_out_V_keep_V_1_state, "video_out_V_keep_V_1_state");
    sc_trace(mVcdFile, video_out_V_strb_V_1_data_out, "video_out_V_strb_V_1_data_out");
    sc_trace(mVcdFile, video_out_V_strb_V_1_vld_in, "video_out_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, video_out_V_strb_V_1_vld_out, "video_out_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, video_out_V_strb_V_1_ack_in, "video_out_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, video_out_V_strb_V_1_ack_out, "video_out_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, video_out_V_strb_V_1_sel_rd, "video_out_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, video_out_V_strb_V_1_sel, "video_out_V_strb_V_1_sel");
    sc_trace(mVcdFile, video_out_V_strb_V_1_state, "video_out_V_strb_V_1_state");
    sc_trace(mVcdFile, video_out_V_user_V_1_data_out, "video_out_V_user_V_1_data_out");
    sc_trace(mVcdFile, video_out_V_user_V_1_vld_in, "video_out_V_user_V_1_vld_in");
    sc_trace(mVcdFile, video_out_V_user_V_1_vld_out, "video_out_V_user_V_1_vld_out");
    sc_trace(mVcdFile, video_out_V_user_V_1_ack_in, "video_out_V_user_V_1_ack_in");
    sc_trace(mVcdFile, video_out_V_user_V_1_ack_out, "video_out_V_user_V_1_ack_out");
    sc_trace(mVcdFile, video_out_V_user_V_1_payload_A, "video_out_V_user_V_1_payload_A");
    sc_trace(mVcdFile, video_out_V_user_V_1_payload_B, "video_out_V_user_V_1_payload_B");
    sc_trace(mVcdFile, video_out_V_user_V_1_sel_rd, "video_out_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, video_out_V_user_V_1_sel_wr, "video_out_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, video_out_V_user_V_1_sel, "video_out_V_user_V_1_sel");
    sc_trace(mVcdFile, video_out_V_user_V_1_load_A, "video_out_V_user_V_1_load_A");
    sc_trace(mVcdFile, video_out_V_user_V_1_load_B, "video_out_V_user_V_1_load_B");
    sc_trace(mVcdFile, video_out_V_user_V_1_state, "video_out_V_user_V_1_state");
    sc_trace(mVcdFile, video_out_V_user_V_1_state_cmp_full, "video_out_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, video_out_V_last_V_1_data_out, "video_out_V_last_V_1_data_out");
    sc_trace(mVcdFile, video_out_V_last_V_1_vld_in, "video_out_V_last_V_1_vld_in");
    sc_trace(mVcdFile, video_out_V_last_V_1_vld_out, "video_out_V_last_V_1_vld_out");
    sc_trace(mVcdFile, video_out_V_last_V_1_ack_in, "video_out_V_last_V_1_ack_in");
    sc_trace(mVcdFile, video_out_V_last_V_1_ack_out, "video_out_V_last_V_1_ack_out");
    sc_trace(mVcdFile, video_out_V_last_V_1_payload_A, "video_out_V_last_V_1_payload_A");
    sc_trace(mVcdFile, video_out_V_last_V_1_payload_B, "video_out_V_last_V_1_payload_B");
    sc_trace(mVcdFile, video_out_V_last_V_1_sel_rd, "video_out_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, video_out_V_last_V_1_sel_wr, "video_out_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, video_out_V_last_V_1_sel, "video_out_V_last_V_1_sel");
    sc_trace(mVcdFile, video_out_V_last_V_1_load_A, "video_out_V_last_V_1_load_A");
    sc_trace(mVcdFile, video_out_V_last_V_1_load_B, "video_out_V_last_V_1_load_B");
    sc_trace(mVcdFile, video_out_V_last_V_1_state, "video_out_V_last_V_1_state");
    sc_trace(mVcdFile, video_out_V_last_V_1_state_cmp_full, "video_out_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, video_out_V_id_V_1_data_out, "video_out_V_id_V_1_data_out");
    sc_trace(mVcdFile, video_out_V_id_V_1_vld_in, "video_out_V_id_V_1_vld_in");
    sc_trace(mVcdFile, video_out_V_id_V_1_vld_out, "video_out_V_id_V_1_vld_out");
    sc_trace(mVcdFile, video_out_V_id_V_1_ack_in, "video_out_V_id_V_1_ack_in");
    sc_trace(mVcdFile, video_out_V_id_V_1_ack_out, "video_out_V_id_V_1_ack_out");
    sc_trace(mVcdFile, video_out_V_id_V_1_sel_rd, "video_out_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, video_out_V_id_V_1_sel, "video_out_V_id_V_1_sel");
    sc_trace(mVcdFile, video_out_V_id_V_1_state, "video_out_V_id_V_1_state");
    sc_trace(mVcdFile, video_out_V_dest_V_1_data_out, "video_out_V_dest_V_1_data_out");
    sc_trace(mVcdFile, video_out_V_dest_V_1_vld_in, "video_out_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, video_out_V_dest_V_1_vld_out, "video_out_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, video_out_V_dest_V_1_ack_in, "video_out_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, video_out_V_dest_V_1_ack_out, "video_out_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, video_out_V_dest_V_1_sel_rd, "video_out_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, video_out_V_dest_V_1_sel, "video_out_V_dest_V_1_sel");
    sc_trace(mVcdFile, video_out_V_dest_V_1_state, "video_out_V_dest_V_1_state");
    sc_trace(mVcdFile, img_1_data_stream_0_blk_n, "img_1_data_stream_0_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, exitcond_i_i_reg_268, "exitcond_i_i_reg_268");
    sc_trace(mVcdFile, img_1_data_stream_1_blk_n, "img_1_data_stream_1_blk_n");
    sc_trace(mVcdFile, video_out_TDATA_blk_n, "video_out_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268, "ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268");
    sc_trace(mVcdFile, p_1_i_i_reg_162, "p_1_i_i_reg_162");
    sc_trace(mVcdFile, tmp_fu_173_p1, "tmp_fu_173_p1");
    sc_trace(mVcdFile, tmp_26_fu_177_p1, "tmp_26_fu_177_p1");
    sc_trace(mVcdFile, r_V_fu_181_p2, "r_V_fu_181_p2");
    sc_trace(mVcdFile, exitcond1_i_i_fu_192_p2, "exitcond1_i_i_fu_192_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_condition_499, "ap_condition_499");
    sc_trace(mVcdFile, i_V_fu_197_p2, "i_V_fu_197_p2");
    sc_trace(mVcdFile, i_V_reg_263, "i_V_reg_263");
    sc_trace(mVcdFile, exitcond_i_i_fu_203_p2, "exitcond_i_i_fu_203_p2");
    sc_trace(mVcdFile, ap_condition_514, "ap_condition_514");
    sc_trace(mVcdFile, j_V_fu_208_p2, "j_V_fu_208_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, axi_last_V_fu_214_p2, "axi_last_V_fu_214_p2");
    sc_trace(mVcdFile, axi_last_V_reg_277, "axi_last_V_reg_277");
    sc_trace(mVcdFile, tmp_data_V_fu_223_p3, "tmp_data_V_fu_223_p3");
    sc_trace(mVcdFile, p_i_i_reg_151, "p_i_i_reg_151");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_user_V_fu_94, "tmp_user_V_fu_94");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Mat2AXIvideo::~Mat2AXIvideo() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Mat2AXIvideo::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                    !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_i_fu_192_p2.read()) && 
                    !esl_seteq<1,1,1>(ap_condition_499.read(), ap_const_boolean_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_203_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_i_fu_192_p2.read()) && 
                    !esl_seteq<1,1,1>(ap_condition_499.read(), ap_const_boolean_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_203_p2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_i_fu_192_p2.read()) && 
                     !esl_seteq<1,1,1>(ap_condition_499.read(), ap_const_boolean_1)) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
                     !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_203_p2.read())))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_i_fu_192_p2.read()) && 
                    !esl_seteq<1,1,1>(ap_condition_499.read(), ap_const_boolean_1))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_203_p2.read()))) {
        p_1_i_i_reg_162 = j_V_fu_208_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_i_fu_192_p2.read()) && 
                !esl_seteq<1,1,1>(ap_condition_499.read(), ap_const_boolean_1))) {
        p_1_i_i_reg_162 = ap_const_lv11_0;
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        p_i_i_reg_151 = ap_const_lv11_0;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        p_i_i_reg_151 = i_V_reg_263.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))))) {
        tmp_user_V_fu_94 = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        tmp_user_V_fu_94 = ap_const_lv1_1;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_data_V_1_vld_out.read()))) {
            video_out_V_data_V_1_sel_rd =  (sc_logic) (~video_out_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_data_V_1_ack_in.read()))) {
            video_out_V_data_V_1_sel_wr =  (sc_logic) (~video_out_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(video_out_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(video_out_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            video_out_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(video_out_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(video_out_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            video_out_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(video_out_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(video_out_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(video_out_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_data_V_1_ack_out.read()))))) {
            video_out_V_data_V_1_state = ap_const_lv2_3;
        } else {
            video_out_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_dest_V_1_vld_out.read()))) {
            video_out_V_dest_V_1_sel_rd =  (sc_logic) (~video_out_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, video_out_V_dest_V_1_state.read())))) {
            video_out_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, video_out_V_dest_V_1_state.read())))) {
            video_out_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, video_out_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, video_out_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_dest_V_1_ack_out.read()))))) {
            video_out_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            video_out_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_id_V_1_vld_out.read()))) {
            video_out_V_id_V_1_sel_rd =  (sc_logic) (~video_out_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, video_out_V_id_V_1_state.read())))) {
            video_out_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, video_out_V_id_V_1_state.read())))) {
            video_out_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, video_out_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, video_out_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_id_V_1_ack_out.read()))))) {
            video_out_V_id_V_1_state = ap_const_lv2_3;
        } else {
            video_out_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_keep_V_1_vld_out.read()))) {
            video_out_V_keep_V_1_sel_rd =  (sc_logic) (~video_out_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, video_out_V_keep_V_1_state.read())))) {
            video_out_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, video_out_V_keep_V_1_state.read())))) {
            video_out_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, video_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, video_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_keep_V_1_ack_out.read()))))) {
            video_out_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            video_out_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_last_V_1_vld_out.read()))) {
            video_out_V_last_V_1_sel_rd =  (sc_logic) (~video_out_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_last_V_1_ack_in.read()))) {
            video_out_V_last_V_1_sel_wr =  (sc_logic) (~video_out_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, video_out_V_last_V_1_state.read())))) {
            video_out_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, video_out_V_last_V_1_state.read())))) {
            video_out_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, video_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, video_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_last_V_1_ack_out.read()))))) {
            video_out_V_last_V_1_state = ap_const_lv2_3;
        } else {
            video_out_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_strb_V_1_vld_out.read()))) {
            video_out_V_strb_V_1_sel_rd =  (sc_logic) (~video_out_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, video_out_V_strb_V_1_state.read())))) {
            video_out_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, video_out_V_strb_V_1_state.read())))) {
            video_out_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, video_out_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, video_out_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_strb_V_1_ack_out.read()))))) {
            video_out_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            video_out_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_user_V_1_vld_out.read()))) {
            video_out_V_user_V_1_sel_rd =  (sc_logic) (~video_out_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_user_V_1_ack_in.read()))) {
            video_out_V_user_V_1_sel_wr =  (sc_logic) (~video_out_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        video_out_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, video_out_V_user_V_1_state.read())))) {
            video_out_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, video_out_V_user_V_1_state.read())))) {
            video_out_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, video_out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, video_out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, video_out_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_user_V_1_ack_out.read()))))) {
            video_out_V_user_V_1_state = ap_const_lv2_3;
        } else {
            video_out_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))))) {
        ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268 = exitcond_i_i_reg_268.read();
        exitcond_i_i_reg_268 = exitcond_i_i_fu_203_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_203_p2.read()))) {
        axi_last_V_reg_277 = axi_last_V_fu_214_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && !esl_seteq<1,1,1>(ap_condition_499.read(), ap_const_boolean_1))) {
        i_V_reg_263 = i_V_fu_197_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_data_V_1_load_A.read())) {
        video_out_V_data_V_1_payload_A = tmp_data_V_fu_223_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_data_V_1_load_B.read())) {
        video_out_V_data_V_1_payload_B = tmp_data_V_fu_223_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_last_V_1_load_A.read())) {
        video_out_V_last_V_1_payload_A = axi_last_V_reg_277.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_last_V_1_load_B.read())) {
        video_out_V_last_V_1_payload_B = axi_last_V_reg_277.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_user_V_1_load_A.read())) {
        video_out_V_user_V_1_payload_A = tmp_user_V_fu_94.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_user_V_1_load_B.read())) {
        video_out_V_user_V_1_payload_B = tmp_user_V_fu_94.read();
    }
}

void Mat2AXIvideo::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(2, 2);
}

void Mat2AXIvideo::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void Mat2AXIvideo::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void Mat2AXIvideo::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read().range(3, 3);
}

void Mat2AXIvideo::thread_ap_condition_499() {
    ap_condition_499 = (esl_seteq<1,1,1>(video_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(video_out_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(video_out_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(video_out_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(video_out_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(video_out_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(video_out_V_dest_V_1_ack_in.read(), ap_const_logic_0));
}

void Mat2AXIvideo::thread_ap_condition_514() {
    ap_condition_514 = ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(img_1_data_stream_0_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(img_1_data_stream_1_empty_n.read(), ap_const_logic_0)));
}

void Mat2AXIvideo::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_i_fu_192_p2.read()) && 
          !esl_seteq<1,1,1>(ap_condition_499.read(), ap_const_boolean_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_i_fu_192_p2.read()) && 
         !esl_seteq<1,1,1>(ap_condition_499.read(), ap_const_boolean_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_axi_last_V_fu_214_p2() {
    axi_last_V_fu_214_p2 = (!p_1_i_i_reg_162.read().is_01() || !r_V_fu_181_p2.read().is_01())? sc_lv<1>(): sc_lv<1>(p_1_i_i_reg_162.read() == r_V_fu_181_p2.read());
}

void Mat2AXIvideo::thread_exitcond1_i_i_fu_192_p2() {
    exitcond1_i_i_fu_192_p2 = (!p_i_i_reg_151.read().is_01() || !tmp_fu_173_p1.read().is_01())? sc_lv<1>(): sc_lv<1>(p_i_i_reg_151.read() == tmp_fu_173_p1.read());
}

void Mat2AXIvideo::thread_exitcond_i_i_fu_203_p2() {
    exitcond_i_i_fu_203_p2 = (!p_1_i_i_reg_162.read().is_01() || !tmp_26_fu_177_p1.read().is_01())? sc_lv<1>(): sc_lv<1>(p_1_i_i_reg_162.read() == tmp_26_fu_177_p1.read());
}

void Mat2AXIvideo::thread_i_V_fu_197_p2() {
    i_V_fu_197_p2 = (!p_i_i_reg_151.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(p_i_i_reg_151.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void Mat2AXIvideo::thread_img_1_data_stream_0_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()))) {
        img_1_data_stream_0_blk_n = img_1_data_stream_0_empty_n.read();
    } else {
        img_1_data_stream_0_blk_n = ap_const_logic_1;
    }
}

void Mat2AXIvideo::thread_img_1_data_stream_0_read() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))))) {
        img_1_data_stream_0_read = ap_const_logic_1;
    } else {
        img_1_data_stream_0_read = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_img_1_data_stream_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()))) {
        img_1_data_stream_1_blk_n = img_1_data_stream_1_empty_n.read();
    } else {
        img_1_data_stream_1_blk_n = ap_const_logic_1;
    }
}

void Mat2AXIvideo::thread_img_1_data_stream_1_read() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))))) {
        img_1_data_stream_1_read = ap_const_logic_1;
    } else {
        img_1_data_stream_1_read = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_j_V_fu_208_p2() {
    j_V_fu_208_p2 = (!p_1_i_i_reg_162.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(p_1_i_i_reg_162.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void Mat2AXIvideo::thread_r_V_fu_181_p2() {
    r_V_fu_181_p2 = (!ap_const_lv11_7FF.is_01() || !tmp_26_fu_177_p1.read().is_01())? sc_lv<11>(): (sc_bigint<11>(ap_const_lv11_7FF) + sc_biguint<11>(tmp_26_fu_177_p1.read()));
}

void Mat2AXIvideo::thread_tmp_26_fu_177_p1() {
    tmp_26_fu_177_p1 = cols.read().range(11-1, 0);
}

void Mat2AXIvideo::thread_tmp_data_V_fu_223_p3() {
    tmp_data_V_fu_223_p3 = esl_concat<8,8>(img_1_data_stream_1_dout.read(), img_1_data_stream_0_dout.read());
}

void Mat2AXIvideo::thread_tmp_fu_173_p1() {
    tmp_fu_173_p1 = rows.read().range(11-1, 0);
}

void Mat2AXIvideo::thread_video_out_TDATA() {
    video_out_TDATA = video_out_V_data_V_1_data_out.read();
}

void Mat2AXIvideo::thread_video_out_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read())))) {
        video_out_TDATA_blk_n =  (sc_logic) (video_out_V_data_V_1_state.read()[1]);
    } else {
        video_out_TDATA_blk_n = ap_const_logic_1;
    }
}

void Mat2AXIvideo::thread_video_out_TDEST() {
    video_out_TDEST = video_out_V_dest_V_1_data_out.read();
}

void Mat2AXIvideo::thread_video_out_TID() {
    video_out_TID = video_out_V_id_V_1_data_out.read();
}

void Mat2AXIvideo::thread_video_out_TKEEP() {
    video_out_TKEEP = video_out_V_keep_V_1_data_out.read();
}

void Mat2AXIvideo::thread_video_out_TLAST() {
    video_out_TLAST = video_out_V_last_V_1_data_out.read();
}

void Mat2AXIvideo::thread_video_out_TSTRB() {
    video_out_TSTRB = video_out_V_strb_V_1_data_out.read();
}

void Mat2AXIvideo::thread_video_out_TUSER() {
    video_out_TUSER = video_out_V_user_V_1_data_out.read();
}

void Mat2AXIvideo::thread_video_out_TVALID() {
    video_out_TVALID =  (sc_logic) (video_out_V_dest_V_1_state.read()[0]);
}

void Mat2AXIvideo::thread_video_out_V_data_V_1_ack_in() {
    video_out_V_data_V_1_ack_in =  (sc_logic) (video_out_V_data_V_1_state.read()[1]);
}

void Mat2AXIvideo::thread_video_out_V_data_V_1_ack_out() {
    video_out_V_data_V_1_ack_out = video_out_TREADY.read();
}

void Mat2AXIvideo::thread_video_out_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_data_V_1_sel.read())) {
        video_out_V_data_V_1_data_out = video_out_V_data_V_1_payload_B.read();
    } else {
        video_out_V_data_V_1_data_out = video_out_V_data_V_1_payload_A.read();
    }
}

void Mat2AXIvideo::thread_video_out_V_data_V_1_load_A() {
    video_out_V_data_V_1_load_A = (video_out_V_data_V_1_state_cmp_full.read() & ~video_out_V_data_V_1_sel_wr.read());
}

void Mat2AXIvideo::thread_video_out_V_data_V_1_load_B() {
    video_out_V_data_V_1_load_B = (video_out_V_data_V_1_sel_wr.read() & video_out_V_data_V_1_state_cmp_full.read());
}

void Mat2AXIvideo::thread_video_out_V_data_V_1_sel() {
    video_out_V_data_V_1_sel = video_out_V_data_V_1_sel_rd.read();
}

void Mat2AXIvideo::thread_video_out_V_data_V_1_state_cmp_full() {
    video_out_V_data_V_1_state_cmp_full =  (sc_logic) ((!video_out_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(video_out_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void Mat2AXIvideo::thread_video_out_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))))) {
        video_out_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        video_out_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_video_out_V_data_V_1_vld_out() {
    video_out_V_data_V_1_vld_out =  (sc_logic) (video_out_V_data_V_1_state.read()[0]);
}

void Mat2AXIvideo::thread_video_out_V_dest_V_1_ack_in() {
    video_out_V_dest_V_1_ack_in =  (sc_logic) (video_out_V_dest_V_1_state.read()[1]);
}

void Mat2AXIvideo::thread_video_out_V_dest_V_1_ack_out() {
    video_out_V_dest_V_1_ack_out = video_out_TREADY.read();
}

void Mat2AXIvideo::thread_video_out_V_dest_V_1_data_out() {
    video_out_V_dest_V_1_data_out = ap_const_lv1_0;
}

void Mat2AXIvideo::thread_video_out_V_dest_V_1_sel() {
    video_out_V_dest_V_1_sel = video_out_V_dest_V_1_sel_rd.read();
}

void Mat2AXIvideo::thread_video_out_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))))) {
        video_out_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        video_out_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_video_out_V_dest_V_1_vld_out() {
    video_out_V_dest_V_1_vld_out =  (sc_logic) (video_out_V_dest_V_1_state.read()[0]);
}

void Mat2AXIvideo::thread_video_out_V_id_V_1_ack_in() {
    video_out_V_id_V_1_ack_in =  (sc_logic) (video_out_V_id_V_1_state.read()[1]);
}

void Mat2AXIvideo::thread_video_out_V_id_V_1_ack_out() {
    video_out_V_id_V_1_ack_out = video_out_TREADY.read();
}

void Mat2AXIvideo::thread_video_out_V_id_V_1_data_out() {
    video_out_V_id_V_1_data_out = ap_const_lv1_0;
}

void Mat2AXIvideo::thread_video_out_V_id_V_1_sel() {
    video_out_V_id_V_1_sel = video_out_V_id_V_1_sel_rd.read();
}

void Mat2AXIvideo::thread_video_out_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))))) {
        video_out_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        video_out_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_video_out_V_id_V_1_vld_out() {
    video_out_V_id_V_1_vld_out =  (sc_logic) (video_out_V_id_V_1_state.read()[0]);
}

void Mat2AXIvideo::thread_video_out_V_keep_V_1_ack_in() {
    video_out_V_keep_V_1_ack_in =  (sc_logic) (video_out_V_keep_V_1_state.read()[1]);
}

void Mat2AXIvideo::thread_video_out_V_keep_V_1_ack_out() {
    video_out_V_keep_V_1_ack_out = video_out_TREADY.read();
}

void Mat2AXIvideo::thread_video_out_V_keep_V_1_data_out() {
    video_out_V_keep_V_1_data_out = ap_const_lv2_3;
}

void Mat2AXIvideo::thread_video_out_V_keep_V_1_sel() {
    video_out_V_keep_V_1_sel = video_out_V_keep_V_1_sel_rd.read();
}

void Mat2AXIvideo::thread_video_out_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))))) {
        video_out_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        video_out_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_video_out_V_keep_V_1_vld_out() {
    video_out_V_keep_V_1_vld_out =  (sc_logic) (video_out_V_keep_V_1_state.read()[0]);
}

void Mat2AXIvideo::thread_video_out_V_last_V_1_ack_in() {
    video_out_V_last_V_1_ack_in =  (sc_logic) (video_out_V_last_V_1_state.read()[1]);
}

void Mat2AXIvideo::thread_video_out_V_last_V_1_ack_out() {
    video_out_V_last_V_1_ack_out = video_out_TREADY.read();
}

void Mat2AXIvideo::thread_video_out_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_last_V_1_sel.read())) {
        video_out_V_last_V_1_data_out = video_out_V_last_V_1_payload_B.read();
    } else {
        video_out_V_last_V_1_data_out = video_out_V_last_V_1_payload_A.read();
    }
}

void Mat2AXIvideo::thread_video_out_V_last_V_1_load_A() {
    video_out_V_last_V_1_load_A = (video_out_V_last_V_1_state_cmp_full.read() & ~video_out_V_last_V_1_sel_wr.read());
}

void Mat2AXIvideo::thread_video_out_V_last_V_1_load_B() {
    video_out_V_last_V_1_load_B = (video_out_V_last_V_1_sel_wr.read() & video_out_V_last_V_1_state_cmp_full.read());
}

void Mat2AXIvideo::thread_video_out_V_last_V_1_sel() {
    video_out_V_last_V_1_sel = video_out_V_last_V_1_sel_rd.read();
}

void Mat2AXIvideo::thread_video_out_V_last_V_1_state_cmp_full() {
    video_out_V_last_V_1_state_cmp_full =  (sc_logic) ((!video_out_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(video_out_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void Mat2AXIvideo::thread_video_out_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))))) {
        video_out_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        video_out_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_video_out_V_last_V_1_vld_out() {
    video_out_V_last_V_1_vld_out =  (sc_logic) (video_out_V_last_V_1_state.read()[0]);
}

void Mat2AXIvideo::thread_video_out_V_strb_V_1_ack_in() {
    video_out_V_strb_V_1_ack_in =  (sc_logic) (video_out_V_strb_V_1_state.read()[1]);
}

void Mat2AXIvideo::thread_video_out_V_strb_V_1_ack_out() {
    video_out_V_strb_V_1_ack_out = video_out_TREADY.read();
}

void Mat2AXIvideo::thread_video_out_V_strb_V_1_data_out() {
    video_out_V_strb_V_1_data_out = ap_const_lv2_0;
}

void Mat2AXIvideo::thread_video_out_V_strb_V_1_sel() {
    video_out_V_strb_V_1_sel = video_out_V_strb_V_1_sel_rd.read();
}

void Mat2AXIvideo::thread_video_out_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))))) {
        video_out_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        video_out_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_video_out_V_strb_V_1_vld_out() {
    video_out_V_strb_V_1_vld_out =  (sc_logic) (video_out_V_strb_V_1_state.read()[0]);
}

void Mat2AXIvideo::thread_video_out_V_user_V_1_ack_in() {
    video_out_V_user_V_1_ack_in =  (sc_logic) (video_out_V_user_V_1_state.read()[1]);
}

void Mat2AXIvideo::thread_video_out_V_user_V_1_ack_out() {
    video_out_V_user_V_1_ack_out = video_out_TREADY.read();
}

void Mat2AXIvideo::thread_video_out_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, video_out_V_user_V_1_sel.read())) {
        video_out_V_user_V_1_data_out = video_out_V_user_V_1_payload_B.read();
    } else {
        video_out_V_user_V_1_data_out = video_out_V_user_V_1_payload_A.read();
    }
}

void Mat2AXIvideo::thread_video_out_V_user_V_1_load_A() {
    video_out_V_user_V_1_load_A = (video_out_V_user_V_1_state_cmp_full.read() & ~video_out_V_user_V_1_sel_wr.read());
}

void Mat2AXIvideo::thread_video_out_V_user_V_1_load_B() {
    video_out_V_user_V_1_load_B = (video_out_V_user_V_1_sel_wr.read() & video_out_V_user_V_1_state_cmp_full.read());
}

void Mat2AXIvideo::thread_video_out_V_user_V_1_sel() {
    video_out_V_user_V_1_sel = video_out_V_user_V_1_sel_rd.read();
}

void Mat2AXIvideo::thread_video_out_V_user_V_1_state_cmp_full() {
    video_out_V_user_V_1_state_cmp_full =  (sc_logic) ((!video_out_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(video_out_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void Mat2AXIvideo::thread_video_out_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))))) {
        video_out_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        video_out_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_video_out_V_user_V_1_vld_out() {
    video_out_V_user_V_1_vld_out =  (sc_logic) (video_out_V_user_V_1_state.read()[0]);
}

void Mat2AXIvideo::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_i_fu_192_p2.read()) && !esl_seteq<1,1,1>(ap_condition_499.read(), ap_const_boolean_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_i_fu_192_p2.read()) && !esl_seteq<1,1,1>(ap_condition_499.read(), ap_const_boolean_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) && !(!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_203_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_condition_514.read(), ap_const_boolean_1) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_268.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_i_i_reg_268.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, video_out_V_data_V_1_ack_in.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_203_p2.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

