-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    video_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    video_in_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    video_in_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    video_out_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    video_out_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    video_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_in_TVALID : IN STD_LOGIC;
    video_in_TREADY : OUT STD_LOGIC;
    video_out_TVALID : OUT STD_LOGIC;
    video_out_TREADY : IN STD_LOGIC );
end;


architecture behav of image_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "image_filter,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=3,HLS_SYN_DSP=17,HLS_SYN_FF=2126,HLS_SYN_LUT=3256}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal ap_rst_n_inv : STD_LOGIC;
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal C_XR0C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR0C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR0C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR1C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR1C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR1C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR2C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR2C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR2C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR0C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR0C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR0C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR1C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR1C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR1C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR2C0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR2C1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR2C2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_high_thresh : STD_LOGIC_VECTOR (31 downto 0);
    signal c_low_thresh : STD_LOGIC_VECTOR (31 downto 0);
    signal c_invert : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat44_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat44_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat44_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat44_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat44_U0_video_in_TREADY : STD_LOGIC;
    signal AXIvideo2Mat44_U0_img_0_data_stream_0_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat44_U0_img_0_data_stream_0_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_img_0_data_stream_1_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat44_U0_img_0_data_stream_1_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_XR0C0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_XR0C0_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_XR0C1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_XR0C1_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_XR0C2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_XR0C2_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_XR1C0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_XR1C0_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_XR1C1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_XR1C1_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_XR1C2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_XR1C2_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_XR2C0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_XR2C0_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_XR2C1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_XR2C1_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_XR2C2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_XR2C2_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_YR0C0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_YR0C0_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_YR0C1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_YR0C1_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_YR0C2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_YR0C2_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_YR1C0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_YR1C0_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_YR1C1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_YR1C1_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_YR1C2_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_YR1C2_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_YR2C0_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_YR2C0_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_C_YR2C1_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_C_YR2C1_channel_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_c_high_thresh_channe_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_c_high_thresh_channe_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_c_low_thresh_channel_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_c_low_thresh_channel_1_write : STD_LOGIC;
    signal AXIvideo2Mat44_U0_c_invert_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat44_U0_c_invert_channel_write : STD_LOGIC;
    signal sobel_filter_core_U0_ap_start : STD_LOGIC;
    signal sobel_filter_core_U0_ap_done : STD_LOGIC;
    signal sobel_filter_core_U0_ap_continue : STD_LOGIC;
    signal sobel_filter_core_U0_ap_idle : STD_LOGIC;
    signal sobel_filter_core_U0_ap_ready : STD_LOGIC;
    signal sobel_filter_core_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal sobel_filter_core_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal sobel_filter_core_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_filter_core_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal sobel_filter_core_U0_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal sobel_filter_core_U0_dst_data_stream_1_V_write : STD_LOGIC;
    signal sobel_filter_core_U0_C_XR0C0_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_XR0C1_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_XR0C2_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_XR1C0_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_XR1C1_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_XR1C2_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_XR2C0_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_XR2C1_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_XR2C2_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_YR0C0_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_YR0C1_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_YR0C2_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_YR1C0_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_YR1C1_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_YR1C2_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_YR2C0_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_C_YR2C1_channel_read : STD_LOGIC;
    signal sobel_filter_core_U0_c_high_thresh_channe_read : STD_LOGIC;
    signal sobel_filter_core_U0_c_low_thresh_channel_1_read : STD_LOGIC;
    signal sobel_filter_core_U0_c_invert_channel_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_1_data_stream_0_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_1_data_stream_1_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_video_out_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal Mat2AXIvideo_U0_video_out_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_video_out_TKEEP : STD_LOGIC_VECTOR (1 downto 0);
    signal Mat2AXIvideo_U0_video_out_TSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal Mat2AXIvideo_U0_video_out_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_video_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_video_out_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_video_out_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_hs_continue : STD_LOGIC;
    signal img_0_data_stream_0_full_n : STD_LOGIC;
    signal img_0_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_empty_n : STD_LOGIC;
    signal img_0_data_stream_1_full_n : STD_LOGIC;
    signal img_0_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_empty_n : STD_LOGIC;
    signal C_XR0C0_channel_full_n : STD_LOGIC;
    signal C_XR0C0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR0C0_channel_empty_n : STD_LOGIC;
    signal C_XR0C1_channel_full_n : STD_LOGIC;
    signal C_XR0C1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR0C1_channel_empty_n : STD_LOGIC;
    signal C_XR0C2_channel_full_n : STD_LOGIC;
    signal C_XR0C2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR0C2_channel_empty_n : STD_LOGIC;
    signal C_XR1C0_channel_full_n : STD_LOGIC;
    signal C_XR1C0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR1C0_channel_empty_n : STD_LOGIC;
    signal C_XR1C1_channel_full_n : STD_LOGIC;
    signal C_XR1C1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR1C1_channel_empty_n : STD_LOGIC;
    signal C_XR1C2_channel_full_n : STD_LOGIC;
    signal C_XR1C2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR1C2_channel_empty_n : STD_LOGIC;
    signal C_XR2C0_channel_full_n : STD_LOGIC;
    signal C_XR2C0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR2C0_channel_empty_n : STD_LOGIC;
    signal C_XR2C1_channel_full_n : STD_LOGIC;
    signal C_XR2C1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR2C1_channel_empty_n : STD_LOGIC;
    signal C_XR2C2_channel_full_n : STD_LOGIC;
    signal C_XR2C2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_XR2C2_channel_empty_n : STD_LOGIC;
    signal C_YR0C0_channel_full_n : STD_LOGIC;
    signal C_YR0C0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR0C0_channel_empty_n : STD_LOGIC;
    signal C_YR0C1_channel_full_n : STD_LOGIC;
    signal C_YR0C1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR0C1_channel_empty_n : STD_LOGIC;
    signal C_YR0C2_channel_full_n : STD_LOGIC;
    signal C_YR0C2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR0C2_channel_empty_n : STD_LOGIC;
    signal C_YR1C0_channel_full_n : STD_LOGIC;
    signal C_YR1C0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR1C0_channel_empty_n : STD_LOGIC;
    signal C_YR1C1_channel_full_n : STD_LOGIC;
    signal C_YR1C1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR1C1_channel_empty_n : STD_LOGIC;
    signal C_YR1C2_channel_full_n : STD_LOGIC;
    signal C_YR1C2_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR1C2_channel_empty_n : STD_LOGIC;
    signal C_YR2C0_channel_full_n : STD_LOGIC;
    signal C_YR2C0_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR2C0_channel_empty_n : STD_LOGIC;
    signal C_YR2C1_channel_full_n : STD_LOGIC;
    signal C_YR2C1_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_YR2C1_channel_empty_n : STD_LOGIC;
    signal c_high_thresh_channe_1_full_n : STD_LOGIC;
    signal c_high_thresh_channe_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c_high_thresh_channe_1_empty_n : STD_LOGIC;
    signal c_low_thresh_channel_1_full_n : STD_LOGIC;
    signal c_low_thresh_channel_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c_low_thresh_channel_1_empty_n : STD_LOGIC;
    signal c_invert_channel_full_n : STD_LOGIC;
    signal c_invert_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c_invert_channel_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_full_n : STD_LOGIC;
    signal img_1_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_empty_n : STD_LOGIC;
    signal img_1_data_stream_1_full_n : STD_LOGIC;
    signal img_1_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_1_empty_n : STD_LOGIC;
    signal ap_hs_done : STD_LOGIC;
    signal ap_hs_ready : STD_LOGIC;

    component AXIvideo2Mat44 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        video_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        video_in_TVALID : IN STD_LOGIC;
        video_in_TREADY : OUT STD_LOGIC;
        video_in_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
        video_in_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        img_0_data_stream_0_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_0_data_stream_0_full_n : IN STD_LOGIC;
        img_0_data_stream_0_write : OUT STD_LOGIC;
        img_0_data_stream_1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_0_data_stream_1_full_n : IN STD_LOGIC;
        img_0_data_stream_1_write : OUT STD_LOGIC;
        C_XR0C0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C2 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C2 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C2 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C2 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C2 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C1 : IN STD_LOGIC_VECTOR (31 downto 0);
        c_high_thresh : IN STD_LOGIC_VECTOR (31 downto 0);
        c_low_thresh : IN STD_LOGIC_VECTOR (31 downto 0);
        c_invert : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C0_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C0_channel_full_n : IN STD_LOGIC;
        C_XR0C0_channel_write : OUT STD_LOGIC;
        C_XR0C1_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C1_channel_full_n : IN STD_LOGIC;
        C_XR0C1_channel_write : OUT STD_LOGIC;
        C_XR0C2_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C2_channel_full_n : IN STD_LOGIC;
        C_XR0C2_channel_write : OUT STD_LOGIC;
        C_XR1C0_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C0_channel_full_n : IN STD_LOGIC;
        C_XR1C0_channel_write : OUT STD_LOGIC;
        C_XR1C1_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C1_channel_full_n : IN STD_LOGIC;
        C_XR1C1_channel_write : OUT STD_LOGIC;
        C_XR1C2_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C2_channel_full_n : IN STD_LOGIC;
        C_XR1C2_channel_write : OUT STD_LOGIC;
        C_XR2C0_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C0_channel_full_n : IN STD_LOGIC;
        C_XR2C0_channel_write : OUT STD_LOGIC;
        C_XR2C1_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C1_channel_full_n : IN STD_LOGIC;
        C_XR2C1_channel_write : OUT STD_LOGIC;
        C_XR2C2_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C2_channel_full_n : IN STD_LOGIC;
        C_XR2C2_channel_write : OUT STD_LOGIC;
        C_YR0C0_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C0_channel_full_n : IN STD_LOGIC;
        C_YR0C0_channel_write : OUT STD_LOGIC;
        C_YR0C1_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C1_channel_full_n : IN STD_LOGIC;
        C_YR0C1_channel_write : OUT STD_LOGIC;
        C_YR0C2_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C2_channel_full_n : IN STD_LOGIC;
        C_YR0C2_channel_write : OUT STD_LOGIC;
        C_YR1C0_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C0_channel_full_n : IN STD_LOGIC;
        C_YR1C0_channel_write : OUT STD_LOGIC;
        C_YR1C1_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C1_channel_full_n : IN STD_LOGIC;
        C_YR1C1_channel_write : OUT STD_LOGIC;
        C_YR1C2_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C2_channel_full_n : IN STD_LOGIC;
        C_YR1C2_channel_write : OUT STD_LOGIC;
        C_YR2C0_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C0_channel_full_n : IN STD_LOGIC;
        C_YR2C0_channel_write : OUT STD_LOGIC;
        C_YR2C1_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C1_channel_full_n : IN STD_LOGIC;
        C_YR2C1_channel_write : OUT STD_LOGIC;
        c_high_thresh_channe_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_high_thresh_channe_full_n : IN STD_LOGIC;
        c_high_thresh_channe_write : OUT STD_LOGIC;
        c_low_thresh_channel_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_low_thresh_channel_1_full_n : IN STD_LOGIC;
        c_low_thresh_channel_1_write : OUT STD_LOGIC;
        c_invert_channel_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_invert_channel_full_n : IN STD_LOGIC;
        c_invert_channel_write : OUT STD_LOGIC );
    end component;


    component sobel_filter_core IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C0_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C0_channel_empty_n : IN STD_LOGIC;
        C_XR0C0_channel_read : OUT STD_LOGIC;
        C_XR0C1_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C1_channel_empty_n : IN STD_LOGIC;
        C_XR0C1_channel_read : OUT STD_LOGIC;
        C_XR0C2_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C2_channel_empty_n : IN STD_LOGIC;
        C_XR0C2_channel_read : OUT STD_LOGIC;
        C_XR1C0_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C0_channel_empty_n : IN STD_LOGIC;
        C_XR1C0_channel_read : OUT STD_LOGIC;
        C_XR1C1_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C1_channel_empty_n : IN STD_LOGIC;
        C_XR1C1_channel_read : OUT STD_LOGIC;
        C_XR1C2_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C2_channel_empty_n : IN STD_LOGIC;
        C_XR1C2_channel_read : OUT STD_LOGIC;
        C_XR2C0_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C0_channel_empty_n : IN STD_LOGIC;
        C_XR2C0_channel_read : OUT STD_LOGIC;
        C_XR2C1_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C1_channel_empty_n : IN STD_LOGIC;
        C_XR2C1_channel_read : OUT STD_LOGIC;
        C_XR2C2_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C2_channel_empty_n : IN STD_LOGIC;
        C_XR2C2_channel_read : OUT STD_LOGIC;
        C_YR0C0_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C0_channel_empty_n : IN STD_LOGIC;
        C_YR0C0_channel_read : OUT STD_LOGIC;
        C_YR0C1_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C1_channel_empty_n : IN STD_LOGIC;
        C_YR0C1_channel_read : OUT STD_LOGIC;
        C_YR0C2_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C2_channel_empty_n : IN STD_LOGIC;
        C_YR0C2_channel_read : OUT STD_LOGIC;
        C_YR1C0_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C0_channel_empty_n : IN STD_LOGIC;
        C_YR1C0_channel_read : OUT STD_LOGIC;
        C_YR1C1_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C1_channel_empty_n : IN STD_LOGIC;
        C_YR1C1_channel_read : OUT STD_LOGIC;
        C_YR1C2_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C2_channel_empty_n : IN STD_LOGIC;
        C_YR1C2_channel_read : OUT STD_LOGIC;
        C_YR2C0_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C0_channel_empty_n : IN STD_LOGIC;
        C_YR2C0_channel_read : OUT STD_LOGIC;
        C_YR2C1_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C1_channel_empty_n : IN STD_LOGIC;
        C_YR2C1_channel_read : OUT STD_LOGIC;
        c_high_thresh_channe_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_high_thresh_channe_empty_n : IN STD_LOGIC;
        c_high_thresh_channe_read : OUT STD_LOGIC;
        c_low_thresh_channel_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_low_thresh_channel_1_empty_n : IN STD_LOGIC;
        c_low_thresh_channel_1_read : OUT STD_LOGIC;
        c_invert_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_invert_channel_empty_n : IN STD_LOGIC;
        c_invert_channel_read : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        img_1_data_stream_0_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_1_data_stream_0_empty_n : IN STD_LOGIC;
        img_1_data_stream_0_read : OUT STD_LOGIC;
        img_1_data_stream_1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_1_data_stream_1_empty_n : IN STD_LOGIC;
        img_1_data_stream_1_read : OUT STD_LOGIC;
        video_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        video_out_TVALID : OUT STD_LOGIC;
        video_out_TREADY : IN STD_LOGIC;
        video_out_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
        video_out_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        video_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component image_filter_img_g8j IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_img_hbi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_XRibs IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_XRjbC IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_XRkbM IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_XRlbW IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_XRmb6 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_XRncg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_XRocq IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_XRpcA IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_XRqcK IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_YRrcU IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_YRsc4 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_YRtde IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_YRudo IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_YRvdy IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_YRwdI IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_YRxdS IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_C_YRyd2 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_c_hizec IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_c_loAem IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_c_inBew IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_img_CeG IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_img_DeQ IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component image_filter_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        C_XR0C0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR0C2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR1C2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_XR2C2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR0C2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR1C2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_YR2C2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_high_thresh : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_low_thresh : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_invert : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    image_filter_CONTROL_BUS_s_axi_U : component image_filter_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rows => rows,
        cols => cols,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        C_XR0C0 => C_XR0C0,
        C_XR0C1 => C_XR0C1,
        C_XR0C2 => C_XR0C2,
        C_XR1C0 => C_XR1C0,
        C_XR1C1 => C_XR1C1,
        C_XR1C2 => C_XR1C2,
        C_XR2C0 => C_XR2C0,
        C_XR2C1 => C_XR2C1,
        C_XR2C2 => C_XR2C2,
        C_YR0C0 => C_YR0C0,
        C_YR0C1 => C_YR0C1,
        C_YR0C2 => C_YR0C2,
        C_YR1C0 => C_YR1C0,
        C_YR1C1 => C_YR1C1,
        C_YR1C2 => C_YR1C2,
        C_YR2C0 => C_YR2C0,
        C_YR2C1 => C_YR2C1,
        C_YR2C2 => C_YR2C2,
        c_high_thresh => c_high_thresh,
        c_low_thresh => c_low_thresh,
        c_invert => c_invert);

    AXIvideo2Mat44_U0 : component AXIvideo2Mat44
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat44_U0_ap_start,
        ap_done => AXIvideo2Mat44_U0_ap_done,
        ap_continue => AXIvideo2Mat44_U0_ap_continue,
        ap_idle => AXIvideo2Mat44_U0_ap_idle,
        ap_ready => AXIvideo2Mat44_U0_ap_ready,
        video_in_TDATA => video_in_TDATA,
        video_in_TVALID => video_in_TVALID,
        video_in_TREADY => AXIvideo2Mat44_U0_video_in_TREADY,
        video_in_TKEEP => video_in_TKEEP,
        video_in_TSTRB => video_in_TSTRB,
        video_in_TUSER => video_in_TUSER,
        video_in_TLAST => video_in_TLAST,
        video_in_TID => video_in_TID,
        video_in_TDEST => video_in_TDEST,
        rows => rows,
        cols => cols,
        img_0_data_stream_0_din => AXIvideo2Mat44_U0_img_0_data_stream_0_din,
        img_0_data_stream_0_full_n => img_0_data_stream_0_full_n,
        img_0_data_stream_0_write => AXIvideo2Mat44_U0_img_0_data_stream_0_write,
        img_0_data_stream_1_din => AXIvideo2Mat44_U0_img_0_data_stream_1_din,
        img_0_data_stream_1_full_n => img_0_data_stream_1_full_n,
        img_0_data_stream_1_write => AXIvideo2Mat44_U0_img_0_data_stream_1_write,
        C_XR0C0 => C_XR0C0,
        C_XR0C1 => C_XR0C1,
        C_XR0C2 => C_XR0C2,
        C_XR1C0 => C_XR1C0,
        C_XR1C1 => C_XR1C1,
        C_XR1C2 => C_XR1C2,
        C_XR2C0 => C_XR2C0,
        C_XR2C1 => C_XR2C1,
        C_XR2C2 => C_XR2C2,
        C_YR0C0 => C_YR0C0,
        C_YR0C1 => C_YR0C1,
        C_YR0C2 => C_YR0C2,
        C_YR1C0 => C_YR1C0,
        C_YR1C1 => C_YR1C1,
        C_YR1C2 => C_YR1C2,
        C_YR2C0 => C_YR2C0,
        C_YR2C1 => C_YR2C1,
        c_high_thresh => c_high_thresh,
        c_low_thresh => c_low_thresh,
        c_invert => c_invert,
        C_XR0C0_channel_din => AXIvideo2Mat44_U0_C_XR0C0_channel_din,
        C_XR0C0_channel_full_n => C_XR0C0_channel_full_n,
        C_XR0C0_channel_write => AXIvideo2Mat44_U0_C_XR0C0_channel_write,
        C_XR0C1_channel_din => AXIvideo2Mat44_U0_C_XR0C1_channel_din,
        C_XR0C1_channel_full_n => C_XR0C1_channel_full_n,
        C_XR0C1_channel_write => AXIvideo2Mat44_U0_C_XR0C1_channel_write,
        C_XR0C2_channel_din => AXIvideo2Mat44_U0_C_XR0C2_channel_din,
        C_XR0C2_channel_full_n => C_XR0C2_channel_full_n,
        C_XR0C2_channel_write => AXIvideo2Mat44_U0_C_XR0C2_channel_write,
        C_XR1C0_channel_din => AXIvideo2Mat44_U0_C_XR1C0_channel_din,
        C_XR1C0_channel_full_n => C_XR1C0_channel_full_n,
        C_XR1C0_channel_write => AXIvideo2Mat44_U0_C_XR1C0_channel_write,
        C_XR1C1_channel_din => AXIvideo2Mat44_U0_C_XR1C1_channel_din,
        C_XR1C1_channel_full_n => C_XR1C1_channel_full_n,
        C_XR1C1_channel_write => AXIvideo2Mat44_U0_C_XR1C1_channel_write,
        C_XR1C2_channel_din => AXIvideo2Mat44_U0_C_XR1C2_channel_din,
        C_XR1C2_channel_full_n => C_XR1C2_channel_full_n,
        C_XR1C2_channel_write => AXIvideo2Mat44_U0_C_XR1C2_channel_write,
        C_XR2C0_channel_din => AXIvideo2Mat44_U0_C_XR2C0_channel_din,
        C_XR2C0_channel_full_n => C_XR2C0_channel_full_n,
        C_XR2C0_channel_write => AXIvideo2Mat44_U0_C_XR2C0_channel_write,
        C_XR2C1_channel_din => AXIvideo2Mat44_U0_C_XR2C1_channel_din,
        C_XR2C1_channel_full_n => C_XR2C1_channel_full_n,
        C_XR2C1_channel_write => AXIvideo2Mat44_U0_C_XR2C1_channel_write,
        C_XR2C2_channel_din => AXIvideo2Mat44_U0_C_XR2C2_channel_din,
        C_XR2C2_channel_full_n => C_XR2C2_channel_full_n,
        C_XR2C2_channel_write => AXIvideo2Mat44_U0_C_XR2C2_channel_write,
        C_YR0C0_channel_din => AXIvideo2Mat44_U0_C_YR0C0_channel_din,
        C_YR0C0_channel_full_n => C_YR0C0_channel_full_n,
        C_YR0C0_channel_write => AXIvideo2Mat44_U0_C_YR0C0_channel_write,
        C_YR0C1_channel_din => AXIvideo2Mat44_U0_C_YR0C1_channel_din,
        C_YR0C1_channel_full_n => C_YR0C1_channel_full_n,
        C_YR0C1_channel_write => AXIvideo2Mat44_U0_C_YR0C1_channel_write,
        C_YR0C2_channel_din => AXIvideo2Mat44_U0_C_YR0C2_channel_din,
        C_YR0C2_channel_full_n => C_YR0C2_channel_full_n,
        C_YR0C2_channel_write => AXIvideo2Mat44_U0_C_YR0C2_channel_write,
        C_YR1C0_channel_din => AXIvideo2Mat44_U0_C_YR1C0_channel_din,
        C_YR1C0_channel_full_n => C_YR1C0_channel_full_n,
        C_YR1C0_channel_write => AXIvideo2Mat44_U0_C_YR1C0_channel_write,
        C_YR1C1_channel_din => AXIvideo2Mat44_U0_C_YR1C1_channel_din,
        C_YR1C1_channel_full_n => C_YR1C1_channel_full_n,
        C_YR1C1_channel_write => AXIvideo2Mat44_U0_C_YR1C1_channel_write,
        C_YR1C2_channel_din => AXIvideo2Mat44_U0_C_YR1C2_channel_din,
        C_YR1C2_channel_full_n => C_YR1C2_channel_full_n,
        C_YR1C2_channel_write => AXIvideo2Mat44_U0_C_YR1C2_channel_write,
        C_YR2C0_channel_din => AXIvideo2Mat44_U0_C_YR2C0_channel_din,
        C_YR2C0_channel_full_n => C_YR2C0_channel_full_n,
        C_YR2C0_channel_write => AXIvideo2Mat44_U0_C_YR2C0_channel_write,
        C_YR2C1_channel_din => AXIvideo2Mat44_U0_C_YR2C1_channel_din,
        C_YR2C1_channel_full_n => C_YR2C1_channel_full_n,
        C_YR2C1_channel_write => AXIvideo2Mat44_U0_C_YR2C1_channel_write,
        c_high_thresh_channe_din => AXIvideo2Mat44_U0_c_high_thresh_channe_din,
        c_high_thresh_channe_full_n => c_high_thresh_channe_1_full_n,
        c_high_thresh_channe_write => AXIvideo2Mat44_U0_c_high_thresh_channe_write,
        c_low_thresh_channel_1_din => AXIvideo2Mat44_U0_c_low_thresh_channel_1_din,
        c_low_thresh_channel_1_full_n => c_low_thresh_channel_1_full_n,
        c_low_thresh_channel_1_write => AXIvideo2Mat44_U0_c_low_thresh_channel_1_write,
        c_invert_channel_din => AXIvideo2Mat44_U0_c_invert_channel_din,
        c_invert_channel_full_n => c_invert_channel_full_n,
        c_invert_channel_write => AXIvideo2Mat44_U0_c_invert_channel_write);

    sobel_filter_core_U0 : component sobel_filter_core
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sobel_filter_core_U0_ap_start,
        ap_done => sobel_filter_core_U0_ap_done,
        ap_continue => sobel_filter_core_U0_ap_continue,
        ap_idle => sobel_filter_core_U0_ap_idle,
        ap_ready => sobel_filter_core_U0_ap_ready,
        src_data_stream_0_V_dout => img_0_data_stream_0_dout,
        src_data_stream_0_V_empty_n => img_0_data_stream_0_empty_n,
        src_data_stream_0_V_read => sobel_filter_core_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => img_0_data_stream_1_dout,
        src_data_stream_1_V_empty_n => img_0_data_stream_1_empty_n,
        src_data_stream_1_V_read => sobel_filter_core_U0_src_data_stream_1_V_read,
        dst_data_stream_0_V_din => sobel_filter_core_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => img_1_data_stream_0_full_n,
        dst_data_stream_0_V_write => sobel_filter_core_U0_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => sobel_filter_core_U0_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => img_1_data_stream_1_full_n,
        dst_data_stream_1_V_write => sobel_filter_core_U0_dst_data_stream_1_V_write,
        rows => rows,
        cols => cols,
        C_XR0C0_channel_dout => C_XR0C0_channel_dout,
        C_XR0C0_channel_empty_n => C_XR0C0_channel_empty_n,
        C_XR0C0_channel_read => sobel_filter_core_U0_C_XR0C0_channel_read,
        C_XR0C1_channel_dout => C_XR0C1_channel_dout,
        C_XR0C1_channel_empty_n => C_XR0C1_channel_empty_n,
        C_XR0C1_channel_read => sobel_filter_core_U0_C_XR0C1_channel_read,
        C_XR0C2_channel_dout => C_XR0C2_channel_dout,
        C_XR0C2_channel_empty_n => C_XR0C2_channel_empty_n,
        C_XR0C2_channel_read => sobel_filter_core_U0_C_XR0C2_channel_read,
        C_XR1C0_channel_dout => C_XR1C0_channel_dout,
        C_XR1C0_channel_empty_n => C_XR1C0_channel_empty_n,
        C_XR1C0_channel_read => sobel_filter_core_U0_C_XR1C0_channel_read,
        C_XR1C1_channel_dout => C_XR1C1_channel_dout,
        C_XR1C1_channel_empty_n => C_XR1C1_channel_empty_n,
        C_XR1C1_channel_read => sobel_filter_core_U0_C_XR1C1_channel_read,
        C_XR1C2_channel_dout => C_XR1C2_channel_dout,
        C_XR1C2_channel_empty_n => C_XR1C2_channel_empty_n,
        C_XR1C2_channel_read => sobel_filter_core_U0_C_XR1C2_channel_read,
        C_XR2C0_channel_dout => C_XR2C0_channel_dout,
        C_XR2C0_channel_empty_n => C_XR2C0_channel_empty_n,
        C_XR2C0_channel_read => sobel_filter_core_U0_C_XR2C0_channel_read,
        C_XR2C1_channel_dout => C_XR2C1_channel_dout,
        C_XR2C1_channel_empty_n => C_XR2C1_channel_empty_n,
        C_XR2C1_channel_read => sobel_filter_core_U0_C_XR2C1_channel_read,
        C_XR2C2_channel_dout => C_XR2C2_channel_dout,
        C_XR2C2_channel_empty_n => C_XR2C2_channel_empty_n,
        C_XR2C2_channel_read => sobel_filter_core_U0_C_XR2C2_channel_read,
        C_YR0C0_channel_dout => C_YR0C0_channel_dout,
        C_YR0C0_channel_empty_n => C_YR0C0_channel_empty_n,
        C_YR0C0_channel_read => sobel_filter_core_U0_C_YR0C0_channel_read,
        C_YR0C1_channel_dout => C_YR0C1_channel_dout,
        C_YR0C1_channel_empty_n => C_YR0C1_channel_empty_n,
        C_YR0C1_channel_read => sobel_filter_core_U0_C_YR0C1_channel_read,
        C_YR0C2_channel_dout => C_YR0C2_channel_dout,
        C_YR0C2_channel_empty_n => C_YR0C2_channel_empty_n,
        C_YR0C2_channel_read => sobel_filter_core_U0_C_YR0C2_channel_read,
        C_YR1C0_channel_dout => C_YR1C0_channel_dout,
        C_YR1C0_channel_empty_n => C_YR1C0_channel_empty_n,
        C_YR1C0_channel_read => sobel_filter_core_U0_C_YR1C0_channel_read,
        C_YR1C1_channel_dout => C_YR1C1_channel_dout,
        C_YR1C1_channel_empty_n => C_YR1C1_channel_empty_n,
        C_YR1C1_channel_read => sobel_filter_core_U0_C_YR1C1_channel_read,
        C_YR1C2_channel_dout => C_YR1C2_channel_dout,
        C_YR1C2_channel_empty_n => C_YR1C2_channel_empty_n,
        C_YR1C2_channel_read => sobel_filter_core_U0_C_YR1C2_channel_read,
        C_YR2C0_channel_dout => C_YR2C0_channel_dout,
        C_YR2C0_channel_empty_n => C_YR2C0_channel_empty_n,
        C_YR2C0_channel_read => sobel_filter_core_U0_C_YR2C0_channel_read,
        C_YR2C1_channel_dout => C_YR2C1_channel_dout,
        C_YR2C1_channel_empty_n => C_YR2C1_channel_empty_n,
        C_YR2C1_channel_read => sobel_filter_core_U0_C_YR2C1_channel_read,
        c_high_thresh_channe_dout => c_high_thresh_channe_1_dout,
        c_high_thresh_channe_empty_n => c_high_thresh_channe_1_empty_n,
        c_high_thresh_channe_read => sobel_filter_core_U0_c_high_thresh_channe_read,
        c_low_thresh_channel_1_dout => c_low_thresh_channel_1_dout,
        c_low_thresh_channel_1_empty_n => c_low_thresh_channel_1_empty_n,
        c_low_thresh_channel_1_read => sobel_filter_core_U0_c_low_thresh_channel_1_read,
        c_invert_channel_dout => c_invert_channel_dout,
        c_invert_channel_empty_n => c_invert_channel_empty_n,
        c_invert_channel_read => sobel_filter_core_U0_c_invert_channel_read);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        rows => rows,
        cols => cols,
        img_1_data_stream_0_dout => img_1_data_stream_0_dout,
        img_1_data_stream_0_empty_n => img_1_data_stream_0_empty_n,
        img_1_data_stream_0_read => Mat2AXIvideo_U0_img_1_data_stream_0_read,
        img_1_data_stream_1_dout => img_1_data_stream_1_dout,
        img_1_data_stream_1_empty_n => img_1_data_stream_1_empty_n,
        img_1_data_stream_1_read => Mat2AXIvideo_U0_img_1_data_stream_1_read,
        video_out_TDATA => Mat2AXIvideo_U0_video_out_TDATA,
        video_out_TVALID => Mat2AXIvideo_U0_video_out_TVALID,
        video_out_TREADY => video_out_TREADY,
        video_out_TKEEP => Mat2AXIvideo_U0_video_out_TKEEP,
        video_out_TSTRB => Mat2AXIvideo_U0_video_out_TSTRB,
        video_out_TUSER => Mat2AXIvideo_U0_video_out_TUSER,
        video_out_TLAST => Mat2AXIvideo_U0_video_out_TLAST,
        video_out_TID => Mat2AXIvideo_U0_video_out_TID,
        video_out_TDEST => Mat2AXIvideo_U0_video_out_TDEST);

    img_0_data_stream_0_U : component image_filter_img_g8j
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_img_0_data_stream_0_din,
        if_full_n => img_0_data_stream_0_full_n,
        if_write => AXIvideo2Mat44_U0_img_0_data_stream_0_write,
        if_dout => img_0_data_stream_0_dout,
        if_empty_n => img_0_data_stream_0_empty_n,
        if_read => sobel_filter_core_U0_src_data_stream_0_V_read);

    img_0_data_stream_1_U : component image_filter_img_hbi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_img_0_data_stream_1_din,
        if_full_n => img_0_data_stream_1_full_n,
        if_write => AXIvideo2Mat44_U0_img_0_data_stream_1_write,
        if_dout => img_0_data_stream_1_dout,
        if_empty_n => img_0_data_stream_1_empty_n,
        if_read => sobel_filter_core_U0_src_data_stream_1_V_read);

    C_XR0C0_channel_U : component image_filter_C_XRibs
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_XR0C0_channel_din,
        if_full_n => C_XR0C0_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_XR0C0_channel_write,
        if_dout => C_XR0C0_channel_dout,
        if_empty_n => C_XR0C0_channel_empty_n,
        if_read => sobel_filter_core_U0_C_XR0C0_channel_read);

    C_XR0C1_channel_U : component image_filter_C_XRjbC
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_XR0C1_channel_din,
        if_full_n => C_XR0C1_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_XR0C1_channel_write,
        if_dout => C_XR0C1_channel_dout,
        if_empty_n => C_XR0C1_channel_empty_n,
        if_read => sobel_filter_core_U0_C_XR0C1_channel_read);

    C_XR0C2_channel_U : component image_filter_C_XRkbM
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_XR0C2_channel_din,
        if_full_n => C_XR0C2_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_XR0C2_channel_write,
        if_dout => C_XR0C2_channel_dout,
        if_empty_n => C_XR0C2_channel_empty_n,
        if_read => sobel_filter_core_U0_C_XR0C2_channel_read);

    C_XR1C0_channel_U : component image_filter_C_XRlbW
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_XR1C0_channel_din,
        if_full_n => C_XR1C0_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_XR1C0_channel_write,
        if_dout => C_XR1C0_channel_dout,
        if_empty_n => C_XR1C0_channel_empty_n,
        if_read => sobel_filter_core_U0_C_XR1C0_channel_read);

    C_XR1C1_channel_U : component image_filter_C_XRmb6
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_XR1C1_channel_din,
        if_full_n => C_XR1C1_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_XR1C1_channel_write,
        if_dout => C_XR1C1_channel_dout,
        if_empty_n => C_XR1C1_channel_empty_n,
        if_read => sobel_filter_core_U0_C_XR1C1_channel_read);

    C_XR1C2_channel_U : component image_filter_C_XRncg
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_XR1C2_channel_din,
        if_full_n => C_XR1C2_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_XR1C2_channel_write,
        if_dout => C_XR1C2_channel_dout,
        if_empty_n => C_XR1C2_channel_empty_n,
        if_read => sobel_filter_core_U0_C_XR1C2_channel_read);

    C_XR2C0_channel_U : component image_filter_C_XRocq
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_XR2C0_channel_din,
        if_full_n => C_XR2C0_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_XR2C0_channel_write,
        if_dout => C_XR2C0_channel_dout,
        if_empty_n => C_XR2C0_channel_empty_n,
        if_read => sobel_filter_core_U0_C_XR2C0_channel_read);

    C_XR2C1_channel_U : component image_filter_C_XRpcA
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_XR2C1_channel_din,
        if_full_n => C_XR2C1_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_XR2C1_channel_write,
        if_dout => C_XR2C1_channel_dout,
        if_empty_n => C_XR2C1_channel_empty_n,
        if_read => sobel_filter_core_U0_C_XR2C1_channel_read);

    C_XR2C2_channel_U : component image_filter_C_XRqcK
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_XR2C2_channel_din,
        if_full_n => C_XR2C2_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_XR2C2_channel_write,
        if_dout => C_XR2C2_channel_dout,
        if_empty_n => C_XR2C2_channel_empty_n,
        if_read => sobel_filter_core_U0_C_XR2C2_channel_read);

    C_YR0C0_channel_U : component image_filter_C_YRrcU
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_YR0C0_channel_din,
        if_full_n => C_YR0C0_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_YR0C0_channel_write,
        if_dout => C_YR0C0_channel_dout,
        if_empty_n => C_YR0C0_channel_empty_n,
        if_read => sobel_filter_core_U0_C_YR0C0_channel_read);

    C_YR0C1_channel_U : component image_filter_C_YRsc4
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_YR0C1_channel_din,
        if_full_n => C_YR0C1_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_YR0C1_channel_write,
        if_dout => C_YR0C1_channel_dout,
        if_empty_n => C_YR0C1_channel_empty_n,
        if_read => sobel_filter_core_U0_C_YR0C1_channel_read);

    C_YR0C2_channel_U : component image_filter_C_YRtde
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_YR0C2_channel_din,
        if_full_n => C_YR0C2_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_YR0C2_channel_write,
        if_dout => C_YR0C2_channel_dout,
        if_empty_n => C_YR0C2_channel_empty_n,
        if_read => sobel_filter_core_U0_C_YR0C2_channel_read);

    C_YR1C0_channel_U : component image_filter_C_YRudo
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_YR1C0_channel_din,
        if_full_n => C_YR1C0_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_YR1C0_channel_write,
        if_dout => C_YR1C0_channel_dout,
        if_empty_n => C_YR1C0_channel_empty_n,
        if_read => sobel_filter_core_U0_C_YR1C0_channel_read);

    C_YR1C1_channel_U : component image_filter_C_YRvdy
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_YR1C1_channel_din,
        if_full_n => C_YR1C1_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_YR1C1_channel_write,
        if_dout => C_YR1C1_channel_dout,
        if_empty_n => C_YR1C1_channel_empty_n,
        if_read => sobel_filter_core_U0_C_YR1C1_channel_read);

    C_YR1C2_channel_U : component image_filter_C_YRwdI
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_YR1C2_channel_din,
        if_full_n => C_YR1C2_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_YR1C2_channel_write,
        if_dout => C_YR1C2_channel_dout,
        if_empty_n => C_YR1C2_channel_empty_n,
        if_read => sobel_filter_core_U0_C_YR1C2_channel_read);

    C_YR2C0_channel_U : component image_filter_C_YRxdS
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_YR2C0_channel_din,
        if_full_n => C_YR2C0_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_YR2C0_channel_write,
        if_dout => C_YR2C0_channel_dout,
        if_empty_n => C_YR2C0_channel_empty_n,
        if_read => sobel_filter_core_U0_C_YR2C0_channel_read);

    C_YR2C1_channel_U : component image_filter_C_YRyd2
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_C_YR2C1_channel_din,
        if_full_n => C_YR2C1_channel_full_n,
        if_write => AXIvideo2Mat44_U0_C_YR2C1_channel_write,
        if_dout => C_YR2C1_channel_dout,
        if_empty_n => C_YR2C1_channel_empty_n,
        if_read => sobel_filter_core_U0_C_YR2C1_channel_read);

    c_high_thresh_channe_1_U : component image_filter_c_hizec
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_c_high_thresh_channe_din,
        if_full_n => c_high_thresh_channe_1_full_n,
        if_write => AXIvideo2Mat44_U0_c_high_thresh_channe_write,
        if_dout => c_high_thresh_channe_1_dout,
        if_empty_n => c_high_thresh_channe_1_empty_n,
        if_read => sobel_filter_core_U0_c_high_thresh_channe_read);

    c_low_thresh_channel_1_U : component image_filter_c_loAem
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_c_low_thresh_channel_1_din,
        if_full_n => c_low_thresh_channel_1_full_n,
        if_write => AXIvideo2Mat44_U0_c_low_thresh_channel_1_write,
        if_dout => c_low_thresh_channel_1_dout,
        if_empty_n => c_low_thresh_channel_1_empty_n,
        if_read => sobel_filter_core_U0_c_low_thresh_channel_1_read);

    c_invert_channel_U : component image_filter_c_inBew
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat44_U0_c_invert_channel_din,
        if_full_n => c_invert_channel_full_n,
        if_write => AXIvideo2Mat44_U0_c_invert_channel_write,
        if_dout => c_invert_channel_dout,
        if_empty_n => c_invert_channel_empty_n,
        if_read => sobel_filter_core_U0_c_invert_channel_read);

    img_1_data_stream_0_U : component image_filter_img_CeG
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sobel_filter_core_U0_dst_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_full_n,
        if_write => sobel_filter_core_U0_dst_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_dout,
        if_empty_n => img_1_data_stream_0_empty_n,
        if_read => Mat2AXIvideo_U0_img_1_data_stream_0_read);

    img_1_data_stream_1_U : component image_filter_img_DeQ
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sobel_filter_core_U0_dst_data_stream_1_V_din,
        if_full_n => img_1_data_stream_1_full_n,
        if_write => sobel_filter_core_U0_dst_data_stream_1_V_write,
        if_dout => img_1_data_stream_1_dout,
        if_empty_n => img_1_data_stream_1_empty_n,
        if_read => Mat2AXIvideo_U0_img_1_data_stream_1_read);




    AXIvideo2Mat44_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat44_U0_ap_start <= (ap_start);
    Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIvideo_U0_ap_start <= ap_start;
    ap_done <= Mat2AXIvideo_U0_ap_done;
    ap_hs_continue <= ap_const_logic_1;
    ap_hs_done <= Mat2AXIvideo_U0_ap_done;
    ap_hs_ready <= AXIvideo2Mat44_U0_ap_ready;
    ap_idle <= (AXIvideo2Mat44_U0_ap_idle and sobel_filter_core_U0_ap_idle and Mat2AXIvideo_U0_ap_idle);
    ap_ready <= AXIvideo2Mat44_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    sobel_filter_core_U0_ap_continue <= ap_const_logic_1;
    sobel_filter_core_U0_ap_start <= ap_start;
    video_in_TREADY <= AXIvideo2Mat44_U0_video_in_TREADY;
    video_out_TDATA <= Mat2AXIvideo_U0_video_out_TDATA;
    video_out_TDEST <= Mat2AXIvideo_U0_video_out_TDEST;
    video_out_TID <= Mat2AXIvideo_U0_video_out_TID;
    video_out_TKEEP <= Mat2AXIvideo_U0_video_out_TKEEP;
    video_out_TLAST <= Mat2AXIvideo_U0_video_out_TLAST;
    video_out_TSTRB <= Mat2AXIvideo_U0_video_out_TSTRB;
    video_out_TUSER <= Mat2AXIvideo_U0_video_out_TUSER;
    video_out_TVALID <= Mat2AXIvideo_U0_video_out_TVALID;
end behav;
