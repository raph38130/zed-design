// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXIvideo2Mat44 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        video_in_TDATA,
        video_in_TVALID,
        video_in_TREADY,
        video_in_TKEEP,
        video_in_TSTRB,
        video_in_TUSER,
        video_in_TLAST,
        video_in_TID,
        video_in_TDEST,
        rows,
        cols,
        img_0_data_stream_0_din,
        img_0_data_stream_0_full_n,
        img_0_data_stream_0_write,
        img_0_data_stream_1_din,
        img_0_data_stream_1_full_n,
        img_0_data_stream_1_write,
        C_XR0C0,
        C_XR0C1,
        C_XR0C2,
        C_XR1C0,
        C_XR1C1,
        C_XR1C2,
        C_XR2C0,
        C_XR2C1,
        C_XR2C2,
        C_YR0C0,
        C_YR0C1,
        C_YR0C2,
        C_YR1C0,
        C_YR1C1,
        C_YR1C2,
        C_YR2C0,
        C_YR2C1,
        c_high_thresh,
        c_low_thresh,
        c_invert,
        C_XR0C0_channel_din,
        C_XR0C0_channel_full_n,
        C_XR0C0_channel_write,
        C_XR0C1_channel_din,
        C_XR0C1_channel_full_n,
        C_XR0C1_channel_write,
        C_XR0C2_channel_din,
        C_XR0C2_channel_full_n,
        C_XR0C2_channel_write,
        C_XR1C0_channel_din,
        C_XR1C0_channel_full_n,
        C_XR1C0_channel_write,
        C_XR1C1_channel_din,
        C_XR1C1_channel_full_n,
        C_XR1C1_channel_write,
        C_XR1C2_channel_din,
        C_XR1C2_channel_full_n,
        C_XR1C2_channel_write,
        C_XR2C0_channel_din,
        C_XR2C0_channel_full_n,
        C_XR2C0_channel_write,
        C_XR2C1_channel_din,
        C_XR2C1_channel_full_n,
        C_XR2C1_channel_write,
        C_XR2C2_channel_din,
        C_XR2C2_channel_full_n,
        C_XR2C2_channel_write,
        C_YR0C0_channel_din,
        C_YR0C0_channel_full_n,
        C_YR0C0_channel_write,
        C_YR0C1_channel_din,
        C_YR0C1_channel_full_n,
        C_YR0C1_channel_write,
        C_YR0C2_channel_din,
        C_YR0C2_channel_full_n,
        C_YR0C2_channel_write,
        C_YR1C0_channel_din,
        C_YR1C0_channel_full_n,
        C_YR1C0_channel_write,
        C_YR1C1_channel_din,
        C_YR1C1_channel_full_n,
        C_YR1C1_channel_write,
        C_YR1C2_channel_din,
        C_YR1C2_channel_full_n,
        C_YR1C2_channel_write,
        C_YR2C0_channel_din,
        C_YR2C0_channel_full_n,
        C_YR2C0_channel_write,
        C_YR2C1_channel_din,
        C_YR2C1_channel_full_n,
        C_YR2C1_channel_write,
        c_high_thresh_channe_din,
        c_high_thresh_channe_full_n,
        c_high_thresh_channe_write,
        c_low_thresh_channel_1_din,
        c_low_thresh_channel_1_full_n,
        c_low_thresh_channel_1_write,
        c_invert_channel_din,
        c_invert_channel_full_n,
        c_invert_channel_write
);

parameter    ap_ST_fsm_state1 = 8'b1;
parameter    ap_ST_fsm_state2 = 8'b10;
parameter    ap_ST_fsm_state3 = 8'b100;
parameter    ap_ST_fsm_state4 = 8'b1000;
parameter    ap_ST_fsm_pp1_stage0 = 8'b10000;
parameter    ap_ST_fsm_state7 = 8'b100000;
parameter    ap_ST_fsm_pp2_stage0 = 8'b1000000;
parameter    ap_ST_fsm_state10 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] video_in_TDATA;
input   video_in_TVALID;
output   video_in_TREADY;
input  [1:0] video_in_TKEEP;
input  [1:0] video_in_TSTRB;
input  [0:0] video_in_TUSER;
input  [0:0] video_in_TLAST;
input  [0:0] video_in_TID;
input  [0:0] video_in_TDEST;
input  [31:0] rows;
input  [31:0] cols;
output  [7:0] img_0_data_stream_0_din;
input   img_0_data_stream_0_full_n;
output   img_0_data_stream_0_write;
output  [7:0] img_0_data_stream_1_din;
input   img_0_data_stream_1_full_n;
output   img_0_data_stream_1_write;
input  [31:0] C_XR0C0;
input  [31:0] C_XR0C1;
input  [31:0] C_XR0C2;
input  [31:0] C_XR1C0;
input  [31:0] C_XR1C1;
input  [31:0] C_XR1C2;
input  [31:0] C_XR2C0;
input  [31:0] C_XR2C1;
input  [31:0] C_XR2C2;
input  [31:0] C_YR0C0;
input  [31:0] C_YR0C1;
input  [31:0] C_YR0C2;
input  [31:0] C_YR1C0;
input  [31:0] C_YR1C1;
input  [31:0] C_YR1C2;
input  [31:0] C_YR2C0;
input  [31:0] C_YR2C1;
input  [31:0] c_high_thresh;
input  [31:0] c_low_thresh;
input  [31:0] c_invert;
output  [31:0] C_XR0C0_channel_din;
input   C_XR0C0_channel_full_n;
output   C_XR0C0_channel_write;
output  [31:0] C_XR0C1_channel_din;
input   C_XR0C1_channel_full_n;
output   C_XR0C1_channel_write;
output  [31:0] C_XR0C2_channel_din;
input   C_XR0C2_channel_full_n;
output   C_XR0C2_channel_write;
output  [31:0] C_XR1C0_channel_din;
input   C_XR1C0_channel_full_n;
output   C_XR1C0_channel_write;
output  [31:0] C_XR1C1_channel_din;
input   C_XR1C1_channel_full_n;
output   C_XR1C1_channel_write;
output  [31:0] C_XR1C2_channel_din;
input   C_XR1C2_channel_full_n;
output   C_XR1C2_channel_write;
output  [31:0] C_XR2C0_channel_din;
input   C_XR2C0_channel_full_n;
output   C_XR2C0_channel_write;
output  [31:0] C_XR2C1_channel_din;
input   C_XR2C1_channel_full_n;
output   C_XR2C1_channel_write;
output  [31:0] C_XR2C2_channel_din;
input   C_XR2C2_channel_full_n;
output   C_XR2C2_channel_write;
output  [31:0] C_YR0C0_channel_din;
input   C_YR0C0_channel_full_n;
output   C_YR0C0_channel_write;
output  [31:0] C_YR0C1_channel_din;
input   C_YR0C1_channel_full_n;
output   C_YR0C1_channel_write;
output  [31:0] C_YR0C2_channel_din;
input   C_YR0C2_channel_full_n;
output   C_YR0C2_channel_write;
output  [31:0] C_YR1C0_channel_din;
input   C_YR1C0_channel_full_n;
output   C_YR1C0_channel_write;
output  [31:0] C_YR1C1_channel_din;
input   C_YR1C1_channel_full_n;
output   C_YR1C1_channel_write;
output  [31:0] C_YR1C2_channel_din;
input   C_YR1C2_channel_full_n;
output   C_YR1C2_channel_write;
output  [31:0] C_YR2C0_channel_din;
input   C_YR2C0_channel_full_n;
output   C_YR2C0_channel_write;
output  [31:0] C_YR2C1_channel_din;
input   C_YR2C1_channel_full_n;
output   C_YR2C1_channel_write;
output  [31:0] c_high_thresh_channe_din;
input   c_high_thresh_channe_full_n;
output   c_high_thresh_channe_write;
output  [31:0] c_low_thresh_channel_1_din;
input   c_low_thresh_channel_1_full_n;
output   c_low_thresh_channel_1_write;
output  [31:0] c_invert_channel_din;
input   c_invert_channel_full_n;
output   c_invert_channel_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_0_data_stream_0_write;
reg img_0_data_stream_1_write;
reg C_XR0C0_channel_write;
reg C_XR0C1_channel_write;
reg C_XR0C2_channel_write;
reg C_XR1C0_channel_write;
reg C_XR1C1_channel_write;
reg C_XR1C2_channel_write;
reg C_XR2C0_channel_write;
reg C_XR2C1_channel_write;
reg C_XR2C2_channel_write;
reg C_YR0C0_channel_write;
reg C_YR0C1_channel_write;
reg C_YR0C2_channel_write;
reg C_YR1C0_channel_write;
reg C_YR1C1_channel_write;
reg C_YR1C2_channel_write;
reg C_YR2C0_channel_write;
reg C_YR2C1_channel_write;
reg c_high_thresh_channe_write;
reg c_low_thresh_channel_1_write;
reg c_invert_channel_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [15:0] video_in_V_data_V_0_data_out;
wire    video_in_V_data_V_0_vld_in;
wire    video_in_V_data_V_0_vld_out;
wire    video_in_V_data_V_0_ack_in;
reg    video_in_V_data_V_0_ack_out;
reg   [15:0] video_in_V_data_V_0_payload_A;
reg   [15:0] video_in_V_data_V_0_payload_B;
reg    video_in_V_data_V_0_sel_rd;
reg    video_in_V_data_V_0_sel_wr;
wire    video_in_V_data_V_0_sel;
wire    video_in_V_data_V_0_load_A;
wire    video_in_V_data_V_0_load_B;
reg   [1:0] video_in_V_data_V_0_state;
wire    video_in_V_data_V_0_state_cmp_full;
reg   [0:0] video_in_V_user_V_0_data_out;
wire    video_in_V_user_V_0_vld_in;
wire    video_in_V_user_V_0_vld_out;
wire    video_in_V_user_V_0_ack_in;
reg    video_in_V_user_V_0_ack_out;
reg   [0:0] video_in_V_user_V_0_payload_A;
reg   [0:0] video_in_V_user_V_0_payload_B;
reg    video_in_V_user_V_0_sel_rd;
reg    video_in_V_user_V_0_sel_wr;
wire    video_in_V_user_V_0_sel;
wire    video_in_V_user_V_0_load_A;
wire    video_in_V_user_V_0_load_B;
reg   [1:0] video_in_V_user_V_0_state;
wire    video_in_V_user_V_0_state_cmp_full;
reg   [0:0] video_in_V_last_V_0_data_out;
wire    video_in_V_last_V_0_vld_in;
wire    video_in_V_last_V_0_vld_out;
wire    video_in_V_last_V_0_ack_in;
reg    video_in_V_last_V_0_ack_out;
reg   [0:0] video_in_V_last_V_0_payload_A;
reg   [0:0] video_in_V_last_V_0_payload_B;
reg    video_in_V_last_V_0_sel_rd;
reg    video_in_V_last_V_0_sel_wr;
wire    video_in_V_last_V_0_sel;
wire    video_in_V_last_V_0_load_A;
wire    video_in_V_last_V_0_load_B;
reg   [1:0] video_in_V_last_V_0_state;
wire    video_in_V_last_V_0_state_cmp_full;
wire    video_in_V_dest_V_0_vld_in;
reg    video_in_V_dest_V_0_ack_out;
reg   [1:0] video_in_V_dest_V_0_state;
reg    video_in_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] exitcond_i_i_i_i_reg_758;
reg   [0:0] brmerge_i_i_i_i_reg_767;
wire   [0:0] ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] eol_2_i_i_i_i_reg_605;
reg    img_0_data_stream_0_blk_n;
reg    img_0_data_stream_1_blk_n;
reg    C_XR0C0_channel_blk_n;
reg    C_XR0C1_channel_blk_n;
reg    C_XR0C2_channel_blk_n;
reg    C_XR1C0_channel_blk_n;
reg    C_XR1C1_channel_blk_n;
reg    C_XR1C2_channel_blk_n;
reg    C_XR2C0_channel_blk_n;
reg    C_XR2C1_channel_blk_n;
reg    C_XR2C2_channel_blk_n;
reg    C_YR0C0_channel_blk_n;
reg    C_YR0C1_channel_blk_n;
reg    C_YR0C2_channel_blk_n;
reg    C_YR1C0_channel_blk_n;
reg    C_YR1C1_channel_blk_n;
reg    C_YR1C2_channel_blk_n;
reg    C_YR2C0_channel_blk_n;
reg    C_YR2C1_channel_blk_n;
reg    c_high_thresh_channe_blk_n;
reg    c_low_thresh_channel_1_blk_n;
reg    c_invert_channel_blk_n;
reg   [10:0] p_3_i_i_i_i_reg_535;
reg   [0:0] eol_i_i_i_i_reg_546;
reg   [0:0] eol_reg_558;
reg   [15:0] axi_data_V_1_i_i_i_i_reg_569;
reg   [0:0] axi_last_V_3_i_i_i_i_reg_616;
reg   [15:0] axi_data_V_3_i_i_i_i_reg_628;
wire   [10:0] tmp_fu_650_p1;
reg    ap_condition_671;
wire   [10:0] tmp_30_fu_654_p1;
reg   [15:0] tmp_data_V_reg_729;
reg   [0:0] tmp_last_V_reg_737;
wire   [0:0] exitcond2_i_i_i_i_fu_667_p2;
wire   [0:0] ap_CS_fsm_state4;
wire   [10:0] i_V_fu_672_p2;
reg   [10:0] i_V_reg_753;
wire   [0:0] exitcond_i_i_i_i_fu_678_p2;
reg    ap_condition_703;
wire   [10:0] j_V_fu_683_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] brmerge_i_i_i_i_fu_692_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] ap_CS_fsm_state7;
reg   [0:0] eol_2_i_i_i_i_phi_fu_608_p4;
reg   [0:0] axi_last_V1_i_i_i_i_reg_504;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] ap_CS_fsm_state3;
reg   [15:0] axi_data_V1_i_i_i_i_reg_514;
reg   [10:0] p_i_i_i_i_reg_524;
reg   [0:0] eol_i_i_i_i_phi_fu_550_p4;
reg   [0:0] axi_last_V_2_i_i_i_i_phi_fu_585_p4;
reg   [15:0] p_Val2_s_phi_fu_597_p4;
wire   [0:0] ap_phi_precharge_reg_pp1_iter1_axi_last_V_2_i_i_i_i_reg_580;
wire   [15:0] ap_phi_precharge_reg_pp1_iter1_p_Val2_s_reg_593;
reg   [0:0] sof_1_i_i_i_i_fu_176;
wire   [0:0] tmp_user_V_fu_658_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_condition_584;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'b1;
#0 video_in_V_data_V_0_sel_rd = 1'b0;
#0 video_in_V_data_V_0_sel_wr = 1'b0;
#0 video_in_V_data_V_0_state = 2'b00;
#0 video_in_V_user_V_0_sel_rd = 1'b0;
#0 video_in_V_user_V_0_sel_wr = 1'b0;
#0 video_in_V_user_V_0_state = 2'b00;
#0 video_in_V_last_V_0_sel_rd = 1'b0;
#0 video_in_V_last_V_0_sel_wr = 1'b0;
#0 video_in_V_last_V_0_state = 2'b00;
#0 video_in_V_dest_V_0_state = 2'b00;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond2_i_i_i_i_fu_667_p2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1)) & ~(1'b0 == exitcond_i_i_i_i_fu_678_p2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond2_i_i_i_i_fu_667_p2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond2_i_i_i_i_fu_667_p2))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & (video_in_V_data_V_0_vld_out == 1'b0)) & ~(1'b0 == eol_2_i_i_i_i_phi_fu_608_p4))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & (video_in_V_data_V_0_vld_out == 1'b0)))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_data_V_0_ack_out) & (1'b1 == video_in_V_data_V_0_vld_out))) begin
            video_in_V_data_V_0_sel_rd <= ~video_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_data_V_0_vld_in) & (1'b1 == video_in_V_data_V_0_ack_in))) begin
            video_in_V_data_V_0_sel_wr <= ~video_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_data_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == video_in_V_data_V_0_vld_in) & (1'b1 == video_in_V_data_V_0_ack_out) & (video_in_V_data_V_0_state == ap_const_lv2_3)) | ((1'b0 == video_in_V_data_V_0_vld_in) & (video_in_V_data_V_0_state == ap_const_lv2_2)))) begin
            video_in_V_data_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == video_in_V_data_V_0_vld_in) & (1'b0 == video_in_V_data_V_0_ack_out) & (video_in_V_data_V_0_state == ap_const_lv2_3)) | ((1'b0 == video_in_V_data_V_0_ack_out) & (video_in_V_data_V_0_state == ap_const_lv2_1)))) begin
            video_in_V_data_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == video_in_V_data_V_0_vld_in) & (video_in_V_data_V_0_state == ap_const_lv2_2)) | ((1'b1 == video_in_V_data_V_0_ack_out) & (video_in_V_data_V_0_state == ap_const_lv2_1)) | ((video_in_V_data_V_0_state == ap_const_lv2_3) & ~((1'b1 == video_in_V_data_V_0_vld_in) & (1'b0 == video_in_V_data_V_0_ack_out)) & ~((1'b0 == video_in_V_data_V_0_vld_in) & (1'b1 == video_in_V_data_V_0_ack_out))))) begin
            video_in_V_data_V_0_state <= ap_const_lv2_3;
        end else begin
            video_in_V_data_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_dest_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == video_in_V_dest_V_0_vld_in) & (1'b1 == video_in_V_dest_V_0_ack_out) & (ap_const_lv2_3 == video_in_V_dest_V_0_state)) | ((1'b0 == video_in_V_dest_V_0_vld_in) & (ap_const_lv2_2 == video_in_V_dest_V_0_state)))) begin
            video_in_V_dest_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == video_in_V_dest_V_0_vld_in) & (1'b0 == video_in_V_dest_V_0_ack_out) & (ap_const_lv2_3 == video_in_V_dest_V_0_state)) | ((1'b0 == video_in_V_dest_V_0_ack_out) & (ap_const_lv2_1 == video_in_V_dest_V_0_state)))) begin
            video_in_V_dest_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == video_in_V_dest_V_0_vld_in) & (ap_const_lv2_2 == video_in_V_dest_V_0_state)) | ((1'b1 == video_in_V_dest_V_0_ack_out) & (ap_const_lv2_1 == video_in_V_dest_V_0_state)) | ((ap_const_lv2_3 == video_in_V_dest_V_0_state) & ~((1'b1 == video_in_V_dest_V_0_vld_in) & (1'b0 == video_in_V_dest_V_0_ack_out)) & ~((1'b0 == video_in_V_dest_V_0_vld_in) & (1'b1 == video_in_V_dest_V_0_ack_out))))) begin
            video_in_V_dest_V_0_state <= ap_const_lv2_3;
        end else begin
            video_in_V_dest_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_last_V_0_ack_out) & (1'b1 == video_in_V_last_V_0_vld_out))) begin
            video_in_V_last_V_0_sel_rd <= ~video_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_last_V_0_vld_in) & (1'b1 == video_in_V_last_V_0_ack_in))) begin
            video_in_V_last_V_0_sel_wr <= ~video_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_last_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == video_in_V_last_V_0_vld_in) & (1'b1 == video_in_V_last_V_0_ack_out) & (ap_const_lv2_3 == video_in_V_last_V_0_state)) | ((1'b0 == video_in_V_last_V_0_vld_in) & (ap_const_lv2_2 == video_in_V_last_V_0_state)))) begin
            video_in_V_last_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == video_in_V_last_V_0_vld_in) & (1'b0 == video_in_V_last_V_0_ack_out) & (ap_const_lv2_3 == video_in_V_last_V_0_state)) | ((1'b0 == video_in_V_last_V_0_ack_out) & (ap_const_lv2_1 == video_in_V_last_V_0_state)))) begin
            video_in_V_last_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == video_in_V_last_V_0_vld_in) & (ap_const_lv2_2 == video_in_V_last_V_0_state)) | ((1'b1 == video_in_V_last_V_0_ack_out) & (ap_const_lv2_1 == video_in_V_last_V_0_state)) | ((ap_const_lv2_3 == video_in_V_last_V_0_state) & ~((1'b1 == video_in_V_last_V_0_vld_in) & (1'b0 == video_in_V_last_V_0_ack_out)) & ~((1'b0 == video_in_V_last_V_0_vld_in) & (1'b1 == video_in_V_last_V_0_ack_out))))) begin
            video_in_V_last_V_0_state <= ap_const_lv2_3;
        end else begin
            video_in_V_last_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_user_V_0_ack_out) & (1'b1 == video_in_V_user_V_0_vld_out))) begin
            video_in_V_user_V_0_sel_rd <= ~video_in_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_user_V_0_vld_in) & (1'b1 == video_in_V_user_V_0_ack_in))) begin
            video_in_V_user_V_0_sel_wr <= ~video_in_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_user_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == video_in_V_user_V_0_vld_in) & (1'b1 == video_in_V_user_V_0_ack_out) & (ap_const_lv2_3 == video_in_V_user_V_0_state)) | ((1'b0 == video_in_V_user_V_0_vld_in) & (ap_const_lv2_2 == video_in_V_user_V_0_state)))) begin
            video_in_V_user_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == video_in_V_user_V_0_vld_in) & (1'b0 == video_in_V_user_V_0_ack_out) & (ap_const_lv2_3 == video_in_V_user_V_0_state)) | ((1'b0 == video_in_V_user_V_0_ack_out) & (ap_const_lv2_1 == video_in_V_user_V_0_state)))) begin
            video_in_V_user_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == video_in_V_user_V_0_vld_in) & (ap_const_lv2_2 == video_in_V_user_V_0_state)) | ((1'b1 == video_in_V_user_V_0_ack_out) & (ap_const_lv2_1 == video_in_V_user_V_0_state)) | ((ap_const_lv2_3 == video_in_V_user_V_0_state) & ~((1'b1 == video_in_V_user_V_0_vld_in) & (1'b0 == video_in_V_user_V_0_ack_out)) & ~((1'b0 == video_in_V_user_V_0_vld_in) & (1'b1 == video_in_V_user_V_0_ack_out))))) begin
            video_in_V_user_V_0_state <= ap_const_lv2_3;
        end else begin
            video_in_V_user_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_data_V1_i_i_i_i_reg_514 <= tmp_data_V_reg_729;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_data_V1_i_i_i_i_reg_514 <= axi_data_V_3_i_i_i_i_reg_628;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_i_i_i_i_reg_758) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1)))) begin
        axi_data_V_1_i_i_i_i_reg_569 <= p_Val2_s_phi_fu_597_p4;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond2_i_i_i_i_fu_667_p2))) begin
        axi_data_V_1_i_i_i_i_reg_569 <= axi_data_V1_i_i_i_i_reg_514;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_data_V_3_i_i_i_i_reg_628 <= axi_data_V_1_i_i_i_i_reg_569;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & (video_in_V_data_V_0_vld_out == 1'b0)))) begin
        axi_data_V_3_i_i_i_i_reg_628 <= video_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_last_V1_i_i_i_i_reg_504 <= tmp_last_V_reg_737;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_last_V1_i_i_i_i_reg_504 <= axi_last_V_3_i_i_i_i_reg_616;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_last_V_3_i_i_i_i_reg_616 <= eol_reg_558;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & (video_in_V_data_V_0_vld_out == 1'b0)))) begin
        axi_last_V_3_i_i_i_i_reg_616 <= video_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        eol_2_i_i_i_i_reg_605 <= eol_i_i_i_i_reg_546;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & (video_in_V_data_V_0_vld_out == 1'b0)))) begin
        eol_2_i_i_i_i_reg_605 <= video_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_i_i_i_i_reg_758) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1)))) begin
        eol_i_i_i_i_reg_546 <= axi_last_V_2_i_i_i_i_phi_fu_585_p4;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond2_i_i_i_i_fu_667_p2))) begin
        eol_i_i_i_i_reg_546 <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_i_i_i_i_reg_758) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1)))) begin
        eol_reg_558 <= axi_last_V_2_i_i_i_i_phi_fu_585_p4;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond2_i_i_i_i_fu_667_p2))) begin
        eol_reg_558 <= axi_last_V1_i_i_i_i_reg_504;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1)) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond_i_i_i_i_fu_678_p2))) begin
        p_3_i_i_i_i_reg_535 <= j_V_fu_683_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond2_i_i_i_i_fu_667_p2))) begin
        p_3_i_i_i_i_reg_535 <= ap_const_lv11_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_i_i_i_i_reg_524 <= ap_const_lv11_0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_i_i_i_i_reg_524 <= i_V_reg_753;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1)) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b0 == exitcond_i_i_i_i_fu_678_p2))) begin
        sof_1_i_i_i_i_fu_176 <= 1'b0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sof_1_i_i_i_i_fu_176 <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1)) & (1'b0 == exitcond_i_i_i_i_fu_678_p2))) begin
        brmerge_i_i_i_i_reg_767 <= brmerge_i_i_i_i_fu_692_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1)))) begin
        exitcond_i_i_i_i_reg_758 <= exitcond_i_i_i_i_fu_678_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_V_reg_753 <= i_V_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(video_in_V_data_V_0_vld_out == 1'b0))) begin
        tmp_data_V_reg_729 <= video_in_V_data_V_0_data_out;
        tmp_last_V_reg_737 <= video_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_data_V_0_load_A)) begin
        video_in_V_data_V_0_payload_A <= video_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_data_V_0_load_B)) begin
        video_in_V_data_V_0_payload_B <= video_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_last_V_0_load_A)) begin
        video_in_V_last_V_0_payload_A <= video_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_last_V_0_load_B)) begin
        video_in_V_last_V_0_payload_B <= video_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_user_V_0_load_A)) begin
        video_in_V_user_V_0_payload_A <= video_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_user_V_0_load_B)) begin
        video_in_V_user_V_0_payload_B <= video_in_TUSER;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_XR0C0_channel_blk_n = C_XR0C0_channel_full_n;
    end else begin
        C_XR0C0_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_XR0C0_channel_write = 1'b1;
    end else begin
        C_XR0C0_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_XR0C1_channel_blk_n = C_XR0C1_channel_full_n;
    end else begin
        C_XR0C1_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_XR0C1_channel_write = 1'b1;
    end else begin
        C_XR0C1_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_XR0C2_channel_blk_n = C_XR0C2_channel_full_n;
    end else begin
        C_XR0C2_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_XR0C2_channel_write = 1'b1;
    end else begin
        C_XR0C2_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_XR1C0_channel_blk_n = C_XR1C0_channel_full_n;
    end else begin
        C_XR1C0_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_XR1C0_channel_write = 1'b1;
    end else begin
        C_XR1C0_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_XR1C1_channel_blk_n = C_XR1C1_channel_full_n;
    end else begin
        C_XR1C1_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_XR1C1_channel_write = 1'b1;
    end else begin
        C_XR1C1_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_XR1C2_channel_blk_n = C_XR1C2_channel_full_n;
    end else begin
        C_XR1C2_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_XR1C2_channel_write = 1'b1;
    end else begin
        C_XR1C2_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_XR2C0_channel_blk_n = C_XR2C0_channel_full_n;
    end else begin
        C_XR2C0_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_XR2C0_channel_write = 1'b1;
    end else begin
        C_XR2C0_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_XR2C1_channel_blk_n = C_XR2C1_channel_full_n;
    end else begin
        C_XR2C1_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_XR2C1_channel_write = 1'b1;
    end else begin
        C_XR2C1_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_XR2C2_channel_blk_n = C_XR2C2_channel_full_n;
    end else begin
        C_XR2C2_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_XR2C2_channel_write = 1'b1;
    end else begin
        C_XR2C2_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_YR0C0_channel_blk_n = C_YR0C0_channel_full_n;
    end else begin
        C_YR0C0_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_YR0C0_channel_write = 1'b1;
    end else begin
        C_YR0C0_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_YR0C1_channel_blk_n = C_YR0C1_channel_full_n;
    end else begin
        C_YR0C1_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_YR0C1_channel_write = 1'b1;
    end else begin
        C_YR0C1_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_YR0C2_channel_blk_n = C_YR0C2_channel_full_n;
    end else begin
        C_YR0C2_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_YR0C2_channel_write = 1'b1;
    end else begin
        C_YR0C2_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_YR1C0_channel_blk_n = C_YR1C0_channel_full_n;
    end else begin
        C_YR1C0_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_YR1C0_channel_write = 1'b1;
    end else begin
        C_YR1C0_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_YR1C1_channel_blk_n = C_YR1C1_channel_full_n;
    end else begin
        C_YR1C1_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_YR1C1_channel_write = 1'b1;
    end else begin
        C_YR1C1_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_YR1C2_channel_blk_n = C_YR1C2_channel_full_n;
    end else begin
        C_YR1C2_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_YR1C2_channel_write = 1'b1;
    end else begin
        C_YR1C2_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_YR2C0_channel_blk_n = C_YR2C0_channel_full_n;
    end else begin
        C_YR2C0_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_YR2C0_channel_write = 1'b1;
    end else begin
        C_YR2C0_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        C_YR2C1_channel_blk_n = C_YR2C1_channel_full_n;
    end else begin
        C_YR2C1_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        C_YR2C1_channel_write = 1'b1;
    end else begin
        C_YR2C1_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond2_i_i_i_i_fu_667_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond2_i_i_i_i_fu_667_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_condition_584 == 1'b1)) begin
        if (~(1'b0 == brmerge_i_i_i_i_reg_767)) begin
            axi_last_V_2_i_i_i_i_phi_fu_585_p4 = eol_reg_558;
        end else if ((1'b0 == brmerge_i_i_i_i_reg_767)) begin
            axi_last_V_2_i_i_i_i_phi_fu_585_p4 = video_in_V_last_V_0_data_out;
        end else begin
            axi_last_V_2_i_i_i_i_phi_fu_585_p4 = ap_phi_precharge_reg_pp1_iter1_axi_last_V_2_i_i_i_i_reg_580;
        end
    end else begin
        axi_last_V_2_i_i_i_i_phi_fu_585_p4 = ap_phi_precharge_reg_pp1_iter1_axi_last_V_2_i_i_i_i_reg_580;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        c_high_thresh_channe_blk_n = c_high_thresh_channe_full_n;
    end else begin
        c_high_thresh_channe_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        c_high_thresh_channe_write = 1'b1;
    end else begin
        c_high_thresh_channe_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        c_invert_channel_blk_n = c_invert_channel_full_n;
    end else begin
        c_invert_channel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        c_invert_channel_write = 1'b1;
    end else begin
        c_invert_channel_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        c_low_thresh_channel_1_blk_n = c_low_thresh_channel_1_full_n;
    end else begin
        c_low_thresh_channel_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_671 == 1'b1))) begin
        c_low_thresh_channel_1_write = 1'b1;
    end else begin
        c_low_thresh_channel_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605))) begin
        eol_2_i_i_i_i_phi_fu_608_p4 = video_in_V_last_V_0_data_out;
    end else begin
        eol_2_i_i_i_i_phi_fu_608_p4 = eol_2_i_i_i_i_reg_605;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_i_i_i_i_reg_758))) begin
        eol_i_i_i_i_phi_fu_550_p4 = axi_last_V_2_i_i_i_i_phi_fu_585_p4;
    end else begin
        eol_i_i_i_i_phi_fu_550_p4 = eol_i_i_i_i_reg_546;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_i_i_i_i_reg_758))) begin
        img_0_data_stream_0_blk_n = img_0_data_stream_0_full_n;
    end else begin
        img_0_data_stream_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_i_i_i_i_reg_758) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1)))) begin
        img_0_data_stream_0_write = 1'b1;
    end else begin
        img_0_data_stream_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_i_i_i_i_reg_758))) begin
        img_0_data_stream_1_blk_n = img_0_data_stream_1_full_n;
    end else begin
        img_0_data_stream_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_i_i_i_i_reg_758) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1)))) begin
        img_0_data_stream_1_write = 1'b1;
    end else begin
        img_0_data_stream_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((ap_condition_584 == 1'b1)) begin
        if (~(1'b0 == brmerge_i_i_i_i_reg_767)) begin
            p_Val2_s_phi_fu_597_p4 = axi_data_V_1_i_i_i_i_reg_569;
        end else if ((1'b0 == brmerge_i_i_i_i_reg_767)) begin
            p_Val2_s_phi_fu_597_p4 = video_in_V_data_V_0_data_out;
        end else begin
            p_Val2_s_phi_fu_597_p4 = ap_phi_precharge_reg_pp1_iter1_p_Val2_s_reg_593;
        end
    end else begin
        p_Val2_s_phi_fu_597_p4 = ap_phi_precharge_reg_pp1_iter1_p_Val2_s_reg_593;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_i_i_i_i_reg_758) & (1'b0 == brmerge_i_i_i_i_reg_767)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605)))) begin
        video_in_TDATA_blk_n = video_in_V_data_V_0_state[1'b0];
    end else begin
        video_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(video_in_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & (video_in_V_data_V_0_vld_out == 1'b0))) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_i_i_i_i_reg_758) & (1'b0 == brmerge_i_i_i_i_reg_767) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1))))) begin
        video_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        video_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == video_in_V_data_V_0_sel)) begin
        video_in_V_data_V_0_data_out = video_in_V_data_V_0_payload_B;
    end else begin
        video_in_V_data_V_0_data_out = video_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(video_in_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & (video_in_V_data_V_0_vld_out == 1'b0))) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_i_i_i_i_reg_758) & (1'b0 == brmerge_i_i_i_i_reg_767) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1))))) begin
        video_in_V_dest_V_0_ack_out = 1'b1;
    end else begin
        video_in_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(video_in_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & (video_in_V_data_V_0_vld_out == 1'b0))) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_i_i_i_i_reg_758) & (1'b0 == brmerge_i_i_i_i_reg_767) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1))))) begin
        video_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        video_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == video_in_V_last_V_0_sel)) begin
        video_in_V_last_V_0_data_out = video_in_V_last_V_0_payload_B;
    end else begin
        video_in_V_last_V_0_data_out = video_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(video_in_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & (video_in_V_data_V_0_vld_out == 1'b0))) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_i_i_i_i_reg_758) & (1'b0 == brmerge_i_i_i_i_reg_767) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1))))) begin
        video_in_V_user_V_0_ack_out = 1'b1;
    end else begin
        video_in_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == video_in_V_user_V_0_sel)) begin
        video_in_V_user_V_0_data_out = video_in_V_user_V_0_payload_B;
    end else begin
        video_in_V_user_V_0_data_out = video_in_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_condition_671 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(video_in_V_data_V_0_vld_out == 1'b0) & (1'b0 == tmp_user_V_fu_658_p1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(video_in_V_data_V_0_vld_out == 1'b0) & ~(1'b0 == tmp_user_V_fu_658_p1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (~(1'b0 == exitcond2_i_i_i_i_fu_667_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1)) & ~(1'b1 == ap_enable_reg_pp1_iter0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (ap_condition_703 == 1'b1)) & ~(1'b1 == ap_enable_reg_pp1_iter0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & (video_in_V_data_V_0_vld_out == 1'b0)) & ~(1'b1 == ap_enable_reg_pp2_iter0))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b0 == eol_2_i_i_i_i_reg_605) & (video_in_V_data_V_0_vld_out == 1'b0)) & ~(1'b1 == ap_enable_reg_pp2_iter0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_XR0C0_channel_din = C_XR0C0;

assign C_XR0C1_channel_din = C_XR0C1;

assign C_XR0C2_channel_din = C_XR0C2;

assign C_XR1C0_channel_din = C_XR1C0;

assign C_XR1C1_channel_din = C_XR1C1;

assign C_XR1C2_channel_din = C_XR1C2;

assign C_XR2C0_channel_din = C_XR2C0;

assign C_XR2C1_channel_din = C_XR2C1;

assign C_XR2C2_channel_din = C_XR2C2;

assign C_YR0C0_channel_din = C_YR0C0;

assign C_YR0C1_channel_din = C_YR0C1;

assign C_YR0C2_channel_din = C_YR0C2;

assign C_YR1C0_channel_din = C_YR1C0;

assign C_YR1C1_channel_din = C_YR1C1;

assign C_YR1C2_channel_din = C_YR1C2;

assign C_YR2C0_channel_din = C_YR2C0;

assign C_YR2C1_channel_din = C_YR2C1;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_5];

always @ (*) begin
    ap_condition_584 = ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b0 == exitcond_i_i_i_i_reg_758));
end

always @ (*) begin
    ap_condition_671 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | (C_XR0C0_channel_full_n == 1'b0) | (C_XR0C1_channel_full_n == 1'b0) | (C_XR0C2_channel_full_n == 1'b0) | (C_XR1C0_channel_full_n == 1'b0) | (C_XR1C1_channel_full_n == 1'b0) | (C_XR1C2_channel_full_n == 1'b0) | (C_XR2C0_channel_full_n == 1'b0) | (C_XR2C1_channel_full_n == 1'b0) | (C_XR2C2_channel_full_n == 1'b0) | (C_YR0C0_channel_full_n == 1'b0) | (C_YR0C1_channel_full_n == 1'b0) | (C_YR0C2_channel_full_n == 1'b0) | (C_YR1C0_channel_full_n == 1'b0) | (C_YR1C1_channel_full_n == 1'b0) | (C_YR1C2_channel_full_n == 1'b0) | (C_YR2C0_channel_full_n == 1'b0) | (C_YR2C1_channel_full_n == 1'b0) | (c_high_thresh_channe_full_n == 1'b0) | (c_low_thresh_channel_1_full_n == 1'b0) | (c_invert_channel_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_703 = (((1'b0 == exitcond_i_i_i_i_reg_758) & (1'b0 == brmerge_i_i_i_i_reg_767) & (video_in_V_data_V_0_vld_out == 1'b0)) | ((1'b0 == exitcond_i_i_i_i_reg_758) & (img_0_data_stream_0_full_n == 1'b0)) | ((1'b0 == exitcond_i_i_i_i_reg_758) & (img_0_data_stream_1_full_n == 1'b0)));
end

assign ap_phi_precharge_reg_pp1_iter1_axi_last_V_2_i_i_i_i_reg_580 = 'bx;

assign ap_phi_precharge_reg_pp1_iter1_p_Val2_s_reg_593 = 'bx;

assign brmerge_i_i_i_i_fu_692_p2 = (sof_1_i_i_i_i_fu_176 | eol_i_i_i_i_phi_fu_550_p4);

assign c_high_thresh_channe_din = c_high_thresh;

assign c_invert_channel_din = c_invert;

assign c_low_thresh_channel_1_din = c_low_thresh;

assign exitcond2_i_i_i_i_fu_667_p2 = ((p_i_i_i_i_reg_524 == tmp_fu_650_p1) ? 1'b1 : 1'b0);

assign exitcond_i_i_i_i_fu_678_p2 = ((p_3_i_i_i_i_reg_535 == tmp_30_fu_654_p1) ? 1'b1 : 1'b0);

assign i_V_fu_672_p2 = (p_i_i_i_i_reg_524 + ap_const_lv11_1);

assign img_0_data_stream_0_din = p_Val2_s_phi_fu_597_p4[7:0];

assign img_0_data_stream_1_din = {{p_Val2_s_phi_fu_597_p4[ap_const_lv32_F : ap_const_lv32_8]}};

assign j_V_fu_683_p2 = (p_3_i_i_i_i_reg_535 + ap_const_lv11_1);

assign tmp_30_fu_654_p1 = cols[10:0];

assign tmp_fu_650_p1 = rows[10:0];

assign tmp_user_V_fu_658_p1 = video_in_V_user_V_0_data_out;

assign video_in_TREADY = video_in_V_dest_V_0_state[1'b1];

assign video_in_V_data_V_0_ack_in = video_in_V_data_V_0_state[1'b1];

assign video_in_V_data_V_0_load_A = (video_in_V_data_V_0_state_cmp_full & ~video_in_V_data_V_0_sel_wr);

assign video_in_V_data_V_0_load_B = (video_in_V_data_V_0_sel_wr & video_in_V_data_V_0_state_cmp_full);

assign video_in_V_data_V_0_sel = video_in_V_data_V_0_sel_rd;

assign video_in_V_data_V_0_state_cmp_full = ((video_in_V_data_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign video_in_V_data_V_0_vld_in = video_in_TVALID;

assign video_in_V_data_V_0_vld_out = video_in_V_data_V_0_state[1'b0];

assign video_in_V_dest_V_0_vld_in = video_in_TVALID;

assign video_in_V_last_V_0_ack_in = video_in_V_last_V_0_state[1'b1];

assign video_in_V_last_V_0_load_A = (video_in_V_last_V_0_state_cmp_full & ~video_in_V_last_V_0_sel_wr);

assign video_in_V_last_V_0_load_B = (video_in_V_last_V_0_sel_wr & video_in_V_last_V_0_state_cmp_full);

assign video_in_V_last_V_0_sel = video_in_V_last_V_0_sel_rd;

assign video_in_V_last_V_0_state_cmp_full = ((video_in_V_last_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign video_in_V_last_V_0_vld_in = video_in_TVALID;

assign video_in_V_last_V_0_vld_out = video_in_V_last_V_0_state[1'b0];

assign video_in_V_user_V_0_ack_in = video_in_V_user_V_0_state[1'b1];

assign video_in_V_user_V_0_load_A = (video_in_V_user_V_0_state_cmp_full & ~video_in_V_user_V_0_sel_wr);

assign video_in_V_user_V_0_load_B = (video_in_V_user_V_0_sel_wr & video_in_V_user_V_0_state_cmp_full);

assign video_in_V_user_V_0_sel = video_in_V_user_V_0_sel_rd;

assign video_in_V_user_V_0_state_cmp_full = ((video_in_V_user_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign video_in_V_user_V_0_vld_in = video_in_TVALID;

assign video_in_V_user_V_0_vld_out = video_in_V_user_V_0_state[1'b0];

endmodule //AXIvideo2Mat44
