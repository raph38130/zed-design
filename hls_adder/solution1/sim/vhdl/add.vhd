-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    n : OUT STD_LOGIC_VECTOR (31 downto 0);
    n_ap_vld : OUT STD_LOGIC;
    p : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_ap_vld : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of add is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "add,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.520000,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=438,HLS_SYN_LUT=622}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv65_124924925 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000100100100100100100100100100100101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv65_1745D1746 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101110100010111010001011101000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (31 downto 0);
    signal b : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal b_read_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_read_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext1_cast_fu_72_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_7_reg_239 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_76_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul2_reg_247 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_9_reg_252 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_90_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_reg_257 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_11_reg_262 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp2_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_96_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext1_cast_fu_72_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_76_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_76_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_7_fu_82_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_90_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_90_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal neg_mul3_fu_121_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_8_fu_126_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_143_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti8_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_mul_fu_163_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_10_fu_168_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_185_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_fu_156_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp1_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component add_mul_32s_34ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component add_mul_32s_32s_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component add_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        a : OUT STD_LOGIC_VECTOR (31 downto 0);
        b : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    add_AXILiteS_s_axi_U : component add_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        a => a,
        b => b);

    add_mul_32s_34ns_bkb_U1 : component add_mul_32s_34ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_76_p0,
        din1 => grp_fu_76_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_76_p2);

    add_mul_32s_34ns_bkb_U2 : component add_mul_32s_34ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_90_p0,
        din1 => grp_fu_90_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_90_p2);

    add_mul_32s_32s_3cud_U3 : component add_mul_32s_32s_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => b_read_reg_221,
        din1 => a_read_reg_227,
        ce => ap_const_logic_1,
        dout => grp_fu_96_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                a_read_reg_227 <= a;
                b_read_reg_221 <= b;
                tmp_7_reg_239 <= tmp_7_fu_82_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                mul2_reg_247 <= grp_fu_76_p2;
                mul_reg_257 <= grp_fu_90_p2;
                tmp_11_reg_262 <= grp_fu_90_p2(64 downto 36);
                tmp_9_reg_252 <= grp_fu_76_p2(64 downto 35);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then
                tmp2_reg_267 <= tmp2_fu_206_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);

    ap_done_assign_proc : process(ap_CS_fsm_state8)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(tmp2_reg_267) + unsigned(tmp1_fu_212_p2));

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    d_fu_156_p3 <= 
        neg_ti8_fu_150_p2 when (tmp_7_reg_239(0) = '1') else 
        tmp_1_fu_140_p1;
    grp_fu_76_p0 <= sext1_cast_fu_72_p1(32 - 1 downto 0);
    grp_fu_76_p1 <= ap_const_lv65_124924925(34 - 1 downto 0);
    grp_fu_90_p0 <= sext1_cast_fu_72_p1(32 - 1 downto 0);
    grp_fu_90_p1 <= ap_const_lv65_1745D1746(34 - 1 downto 0);
    n <= grp_fu_96_p2;

    n_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            n_ap_vld <= ap_const_logic_1;
        else 
            n_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    neg_mul3_fu_121_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul2_reg_247));
    neg_mul_fu_163_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_reg_257));
    neg_ti8_fu_150_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_3_fu_143_p3));
    neg_ti_fu_192_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_6_fu_185_p3));
    p <= 
        neg_ti_fu_192_p2 when (tmp_7_reg_239(0) = '1') else 
        tmp_5_fu_182_p1;

    p_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            p_ap_vld <= ap_const_logic_1;
        else 
            p_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sext1_cast_fu_72_p0 <= a;
        sext1_cast_fu_72_p1 <= std_logic_vector(resize(signed(sext1_cast_fu_72_p0),65));

    tmp1_fu_212_p2 <= std_logic_vector(signed(b_read_reg_221) + signed(a_read_reg_227));
    tmp2_fu_206_p2 <= std_logic_vector(unsigned(grp_fu_96_p2) + unsigned(d_fu_156_p3));
    tmp_10_fu_168_p4 <= neg_mul_fu_163_p2(64 downto 36);
        tmp_1_fu_140_p1 <= std_logic_vector(resize(signed(tmp_9_reg_252),32));

    tmp_3_fu_143_p3 <= 
        tmp_fu_136_p1 when (tmp_7_reg_239(0) = '1') else 
        tmp_1_fu_140_p1;
        tmp_4_fu_178_p1 <= std_logic_vector(resize(signed(tmp_10_fu_168_p4),32));

        tmp_5_fu_182_p1 <= std_logic_vector(resize(signed(tmp_11_reg_262),32));

    tmp_6_fu_185_p3 <= 
        tmp_4_fu_178_p1 when (tmp_7_reg_239(0) = '1') else 
        tmp_5_fu_182_p1;
    tmp_7_fu_82_p1 <= a;
    tmp_8_fu_126_p4 <= neg_mul3_fu_121_p2(64 downto 35);
        tmp_fu_136_p1 <= std_logic_vector(resize(signed(tmp_8_fu_126_p4),32));

end behav;
